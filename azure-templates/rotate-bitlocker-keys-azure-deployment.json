{
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "variables": {
    "scriptContent": "<#\\n.TITLE\\n    Rotate BitLocker Keys\\n\\n.SYNOPSIS\\n    Rotates BitLocker keys for all Windows devices in Intune using Graph API.\\n\\n.DESCRIPTION\\n    This script connects to Intune via Graph API and rotates the BitLocker keys for all managed Windows devices.\\n    The script retrieves all Windows devices from Intune and triggers BitLocker key rotation for each device.\\n    It provides real-time feedback on the rotation process and handles errors gracefully.\\n\\n.TAGS\\n    Security,Operational\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.ReadWrite.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1\\n    Rotates BitLocker keys for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1 -DelaySeconds 5\\n    Rotates BitLocker keys with a 5-second delay between operations\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - BitLocker key rotation is triggered immediately but may take time to complete on the device\\n    - The script will show real-time progress and results\\n    - Only Windows devices with BitLocker enabled will be processed\\n    - Disclaimer: This script is provided AS IS without warranty of any kind. Use it at your own risk.\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Delay in seconds between BitLocker key rotation operations\\\")]\\n    [int]$DelaySeconds = 2\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $(<#\\n.TITLE\\n    Rotate BitLocker Keys\\n\\n.SYNOPSIS\\n    Rotates BitLocker keys for all Windows devices in Intune using Graph API.\\n\\n.DESCRIPTION\\n    This script connects to Intune via Graph API and rotates the BitLocker keys for all managed Windows devices.\\n    The script retrieves all Windows devices from Intune and triggers BitLocker key rotation for each device.\\n    It provides real-time feedback on the rotation process and handles errors gracefully.\\n\\n.TAGS\\n    Security,Operational\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.ReadWrite.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1\\n    Rotates BitLocker keys for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1 -DelaySeconds 5\\n    Rotates BitLocker keys with a 5-second delay between operations\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - BitLocker key rotation is triggered immediately but may take time to complete on the device\\n    - The script will show real-time progress and results\\n    - Only Windows devices with BitLocker enabled will be processed\\n    - Disclaimer: This script is provided AS IS without warranty of any kind. Use it at your own risk.\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Delay in seconds between BitLocker key rotation operations\\\")]\\n    [int]$DelaySeconds = 2\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.ReadWrite.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to rotate BitLocker keys for a device\\nfunction Invoke-BitLockerKeyRotation {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceId,\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceName\\n    )\\n    \\n    try {\\n        $rotateUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices('$DeviceId')/rotateBitLockerKeys\\\"\\n        Invoke-MgGraphRequest -Method POST -Uri $rotateUri -ContentType \\\"application/json\\\"\\n        \\n        Write-Information \\\"✓ Successfully rotated BitLocker keys for device: $DeviceName\\\" -InformationAction Continue\\n        return $true\\n    }\\n    catch {\\n        Write-Warning \\\"✗ Failed to rotate BitLocker keys for device $DeviceName : $($_.Exception.Message)\\\"\\n        return $false\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key rotation process...\\\" -InformationAction Continue\\n    \\n    # Get all managed Windows devices from Intune\\n    Write-Information \\\"Retrieving all Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices?`$select=id,deviceName,operatingSystem&`$filter=operatingSystem eq 'Windows'\\\"\\n    $managedDevices = Get-MgGraphAllPage -Uri $devicesUri\\n    \\n    if ($managedDevices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune.\\\"\\n        exit 0\\n    }\\n    \\n    Write-Information \\\"✓ Found $($managedDevices.Count) Windows devices\\\" -InformationAction Continue\\n    \\n    # Initialize counters\\n    $successCount = 0\\n    $failureCount = 0\\n    $totalDevices = $managedDevices.Count\\n    $currentDevice = 0\\n    \\n    # Process each device\\n    foreach ($device in $managedDevices) {\\n        $currentDevice++\\n        $deviceId = $device.id\\n        $deviceName = $device.deviceName\\n        \\n        Write-Information \\\"[$currentDevice/$totalDevices] Processing device: $deviceName\\\" -InformationAction Continue\\n        \\n        # Rotate BitLocker keys\\n        $success = Invoke-BitLockerKeyRotation -DeviceId $deviceId -DeviceName $deviceName\\n        \\n        if ($success) {\\n            $successCount++\\n        }\\n        else {\\n            $failureCount++\\n        }\\n        \\n        # Add delay between operations if specified\\n        if ($DelaySeconds -gt 0 -and $currentDevice -lt $totalDevices) {\\n            Start-Sleep -Seconds $DelaySeconds\\n        }\\n    }\\n    \\n    # Display summary\\n    Write-Information \\\"`n\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Rotation Summary\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices processed: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Successful rotations: $successCount\\\" -InformationAction Continue\\n    Write-Information \\\"Failed rotations: $failureCount\\\" -InformationAction Continue\\n    Write-Information \\\"Success rate: $([math]::Round(($successCount / $totalDevices) * 100, 2))%\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    \\n    Write-Information \\\"✓ BitLocker key rotation process completed\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script execution failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Disconnect from Microsoft Graph\\n    try {\\n        Disconnect-MgGraph | Out-Null\\n        Write-Information \\\"✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        # Ignore disconnection errors - this is expected behavior when already disconnected\\n        Write-Verbose \\\"Graph disconnection completed (may have already been disconnected)\\\"\\n    }\\n} .Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.ReadWrite.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $(<#\\n.TITLE\\n    Rotate BitLocker Keys\\n\\n.SYNOPSIS\\n    Rotates BitLocker keys for all Windows devices in Intune using Graph API.\\n\\n.DESCRIPTION\\n    This script connects to Intune via Graph API and rotates the BitLocker keys for all managed Windows devices.\\n    The script retrieves all Windows devices from Intune and triggers BitLocker key rotation for each device.\\n    It provides real-time feedback on the rotation process and handles errors gracefully.\\n\\n.TAGS\\n    Security,Operational\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.ReadWrite.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1\\n    Rotates BitLocker keys for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\rotate-bitlocker-keys.ps1 -DelaySeconds 5\\n    Rotates BitLocker keys with a 5-second delay between operations\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - BitLocker key rotation is triggered immediately but may take time to complete on the device\\n    - The script will show real-time progress and results\\n    - Only Windows devices with BitLocker enabled will be processed\\n    - Disclaimer: This script is provided AS IS without warranty of any kind. Use it at your own risk.\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Delay in seconds between BitLocker key rotation operations\\\")]\\n    [int]$DelaySeconds = 2\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.ReadWrite.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to rotate BitLocker keys for a device\\nfunction Invoke-BitLockerKeyRotation {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceId,\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceName\\n    )\\n    \\n    try {\\n        $rotateUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices('$DeviceId')/rotateBitLockerKeys\\\"\\n        Invoke-MgGraphRequest -Method POST -Uri $rotateUri -ContentType \\\"application/json\\\"\\n        \\n        Write-Information \\\"✓ Successfully rotated BitLocker keys for device: $DeviceName\\\" -InformationAction Continue\\n        return $true\\n    }\\n    catch {\\n        Write-Warning \\\"✗ Failed to rotate BitLocker keys for device $DeviceName : $($_.Exception.Message)\\\"\\n        return $false\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key rotation process...\\\" -InformationAction Continue\\n    \\n    # Get all managed Windows devices from Intune\\n    Write-Information \\\"Retrieving all Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices?`$select=id,deviceName,operatingSystem&`$filter=operatingSystem eq 'Windows'\\\"\\n    $managedDevices = Get-MgGraphAllPage -Uri $devicesUri\\n    \\n    if ($managedDevices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune.\\\"\\n        exit 0\\n    }\\n    \\n    Write-Information \\\"✓ Found $($managedDevices.Count) Windows devices\\\" -InformationAction Continue\\n    \\n    # Initialize counters\\n    $successCount = 0\\n    $failureCount = 0\\n    $totalDevices = $managedDevices.Count\\n    $currentDevice = 0\\n    \\n    # Process each device\\n    foreach ($device in $managedDevices) {\\n        $currentDevice++\\n        $deviceId = $device.id\\n        $deviceName = $device.deviceName\\n        \\n        Write-Information \\\"[$currentDevice/$totalDevices] Processing device: $deviceName\\\" -InformationAction Continue\\n        \\n        # Rotate BitLocker keys\\n        $success = Invoke-BitLockerKeyRotation -DeviceId $deviceId -DeviceName $deviceName\\n        \\n        if ($success) {\\n            $successCount++\\n        }\\n        else {\\n            $failureCount++\\n        }\\n        \\n        # Add delay between operations if specified\\n        if ($DelaySeconds -gt 0 -and $currentDevice -lt $totalDevices) {\\n            Start-Sleep -Seconds $DelaySeconds\\n        }\\n    }\\n    \\n    # Display summary\\n    Write-Information \\\"`n\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Rotation Summary\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices processed: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Successful rotations: $successCount\\\" -InformationAction Continue\\n    Write-Information \\\"Failed rotations: $failureCount\\\" -InformationAction Continue\\n    Write-Information \\\"Success rate: $([math]::Round(($successCount / $totalDevices) * 100, 2))%\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    \\n    Write-Information \\\"✓ BitLocker key rotation process completed\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script execution failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Disconnect from Microsoft Graph\\n    try {\\n        Disconnect-MgGraph | Out-Null\\n        Write-Information \\\"✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        # Ignore disconnection errors - this is expected behavior when already disconnected\\n        Write-Verbose \\\"Graph disconnection completed (may have already been disconnected)\\\"\\n    }\\n} .Exception.Message)\\\"\\n        exit 1\\n    }\\n}# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to rotate BitLocker keys for a device\\nfunction Invoke-BitLockerKeyRotation {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceId,\\n        [Parameter(Mandatory = $true)]\\n        [string]$DeviceName\\n    )\\n    \\n    try {\\n        $rotateUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices('$DeviceId')/rotateBitLockerKeys\\\"\\n        Invoke-MgGraphRequest -Method POST -Uri $rotateUri -ContentType \\\"application/json\\\"\\n        \\n        Write-Information \\\"✓ Successfully rotated BitLocker keys for device: $DeviceName\\\" -InformationAction Continue\\n        return $true\\n    }\\n    catch {\\n        Write-Warning \\\"✗ Failed to rotate BitLocker keys for device $DeviceName : $($_.Exception.Message)\\\"\\n        return $false\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key rotation process...\\\" -InformationAction Continue\\n    \\n    # Get all managed Windows devices from Intune\\n    Write-Information \\\"Retrieving all Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices?`$select=id,deviceName,operatingSystem&`$filter=operatingSystem eq 'Windows'\\\"\\n    $managedDevices = Get-MgGraphAllPage -Uri $devicesUri\\n    \\n    if ($managedDevices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune.\\\"\\n        exit 0\\n    }\\n    \\n    Write-Information \\\"✓ Found $($managedDevices.Count) Windows devices\\\" -InformationAction Continue\\n    \\n    # Initialize counters\\n    $successCount = 0\\n    $failureCount = 0\\n    $totalDevices = $managedDevices.Count\\n    $currentDevice = 0\\n    \\n    # Process each device\\n    foreach ($device in $managedDevices) {\\n        $currentDevice++\\n        $deviceId = $device.id\\n        $deviceName = $device.deviceName\\n        \\n        Write-Information \\\"[$currentDevice/$totalDevices] Processing device: $deviceName\\\" -InformationAction Continue\\n        \\n        # Rotate BitLocker keys\\n        $success = Invoke-BitLockerKeyRotation -DeviceId $deviceId -DeviceName $deviceName\\n        \\n        if ($success) {\\n            $successCount++\\n        }\\n        else {\\n            $failureCount++\\n        }\\n        \\n        # Add delay between operations if specified\\n        if ($DelaySeconds -gt 0 -and $currentDevice -lt $totalDevices) {\\n            Start-Sleep -Seconds $DelaySeconds\\n        }\\n    }\\n    \\n    # Display summary\\n    Write-Information \\\"`n\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Rotation Summary\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices processed: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Successful rotations: $successCount\\\" -InformationAction Continue\\n    Write-Information \\\"Failed rotations: $failureCount\\\" -InformationAction Continue\\n    Write-Information \\\"Success rate: $([math]::Round(($successCount / $totalDevices) * 100, 2))%\\\" -InformationAction Continue\\n    Write-Information \\\"============================================\\\" -InformationAction Continue\\n    \\n    Write-Information \\\"✓ BitLocker key rotation process completed\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script execution failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Disconnect from Microsoft Graph\\n    try {\\n        Disconnect-MgGraph | Out-Null\\n        Write-Information \\\"✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        # Ignore disconnection errors - this is expected behavior when already disconnected\\n        Write-Verbose \\\"Graph disconnection completed (may have already been disconnected)\\\"\\n    }\\n} ",
    "logVerbose": false,
    "runbookType": "PowerShell",
    "logProgress": false
  },
  "resources": [
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]",
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "draft": {
          "inEdit": false
        },
        "logVerbose": "[variables('logVerbose')]",
        "description": "[parameters('runbookDescription')]",
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]"
      }
    },
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]",
      "apiVersion": "2020-01-13-preview",
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ]
    }
  ],
  "parameters": {
    "runbookDescription": {
      "metadata": {
        "description": "Description of the runbook"
      },
      "defaultValue": "This script connects to Intune via Graph API and rotates the BitLocker keys for all managed Windows devices.",
      "type": "string"
    },
    "runbookName": {
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      },
      "defaultValue": "rotate-bitlocker-keys",
      "type": "string"
    },
    "automationAccountName": {
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      },
      "type": "string"
    }
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    }
  }
}
