{
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "variables": {
    "scriptContent": "\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.ReadWrite.All,DeviceManagementManagedDevices.Read.All,Group.Read.All,GroupMember.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n<#\\n.TITLE\\n    Wipe Devices\\n\\n.SYNOPSIS\\n    Perform remote wipe operations on specific managed devices in Intune or devices in an Entra ID group.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and triggers remote wipe operations on targeted devices.\\n    You can target devices by specific names, device IDs, or by Entra ID group membership.\\n    The script provides options for selective wipe (remove company data) or full wipe (factory reset).\\n    All operations include confirmation prompts to prevent accidental data loss.\\n\\n.TAGS\\n    Operational,Devices\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.ReadWrite.All,DeviceManagementManagedDevices.Read.All,Group.Read.All,GroupMember.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\wipe-devices.ps1 -DeviceNames \\\"LAPTOP001\\\",\\\"DESKTOP002\\\" -WipeType Selective\\n    Performs selective wipe on specific devices by name\\n\\n.EXAMPLE\\n    .\\\\wipe-devices.ps1 -DeviceIds \\\"12345678-1234-1234-1234-123456789012\\\" -WipeType Full -Force\\n    Performs full wipe on a specific device by ID without confirmation\\n\\n.EXAMPLE\\n    .\\\\wipe-devices.ps1 -EntraGroupName \\\"Compromised Devices\\\" -WipeType Selective\\n    Performs selective wipe on all devices belonging to users in the specified group\\n\\n.EXAMPLE\\n    .\\\\wipe-devices.ps1 -DeviceNames \\\"LAPTOP001\\\" -WipeType Full -KeepEnrollmentData -PIN \\\"123456\\\"\\n    Performs full wipe while keeping enrollment data and using a PIN for device unlock\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - CAUTION: Full wipe will completely reset the device to factory settings\\n    - Selective wipe removes only company data and apps\\n    - Operations cannot be undone - use with extreme caution\\n    - Confirmation prompts are shown unless -Force parameter is used\\n#>\\n\\n[CmdletBinding(DefaultParameterSetName = 'DeviceNames')]\\nparam(\\n    [Parameter(Mandatory = $true, ParameterSetName = 'DeviceNames')]\\n    [string[]]$DeviceNames,\\n    \\n    [Parameter(Mandatory = $true, ParameterSetName = 'DeviceIds')]\\n    [string[]]$DeviceIds,\\n    \\n    [Parameter(Mandatory = $true, ParameterSetName = 'EntraGroup')]\\n    [string]$EntraGroupName,\\n    \\n    [Parameter(Mandatory = $true)]\\n    [ValidateSet('Selective', 'Full')]\\n    [string]$WipeType,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$Force,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$KeepEnrollmentData,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [string]$PIN,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [int]$WipeDelaySeconds = 3\\n)\\n\\n# Check if required module is installed\\nif (-not (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication)) {\\n    Write-Error \\\"Microsoft.Graph.Authentication module is required. Install it using: Install-Module Microsoft.Graph.Authentication -Scope CurrentUser\\\"\\n    exit 1\\n}\\n\\n# Import required module\\nImport-Module Microsoft.Graph.Authentication\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $scopes = @(\\\"DeviceManagementManagedDevices.ReadWrite.All\\\", \\\"DeviceManagementManagedDevices.Read.All\\\")\\n    if ($PSCmdlet.ParameterSetName -eq 'EntraGroup') {\\n        $scopes += @(\\\"Group.Read.All\\\", \\\"GroupMember.Read.All\\\")\\n    }\\n    Connect-MgGraph -Scopes $scopes -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Function to get all pages of results\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $allResults = @()\\n    $nextLink = $Uri\\n    $requestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($requestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $response = Invoke-MgGraphRequest -Uri $nextLink -Method GET\\n            $requestCount++\\n            \\n            if ($response.value) {\\n                $allResults += $response.value\\n            }\\n            else {\\n                $allResults += $response\\n            }\\n            \\n            $nextLink = $response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $nextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($nextLink)\\n    \\n    return $allResults\\n}\\n\\n# Function to trigger device wipe\\nfunction Invoke-DeviceWipe {\\n    param(\\n        [string]$DeviceId,\\n        [string]$DeviceName,\\n        [string]$WipeType,\\n        [bool]$KeepEnrollmentData,\\n        [string]$PIN\\n    )\\n    \\n    try {\\n        # Prepare wipe request body\\n        $wipeBody = @{\\n            keepEnrollmentData = $KeepEnrollmentData\\n        }\\n        \\n        # Add PIN if provided for full wipe\\n        if ($WipeType -eq 'Full' -and -not [string]::IsNullOrEmpty($PIN)) {\\n            $wipeBody['useProtectedWipe'] = $true\\n            $wipeBody['macOsUnlockCode'] = $PIN\\n        }\\n        \\n        # Determine endpoint based on wipe type\\n        if ($WipeType -eq 'Selective') {\\n            $wipeUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices('$DeviceId')/retire\\\"\\n        }\\n        else {\\n            $wipeUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices('$DeviceId')/wipe\\\"\\n        }\\n        \\n        Invoke-MgGraphRequest -Uri $wipeUri -Method POST -Body ($wipeBody | ConvertTo-Json)\\n        Write-Information \\\"✓ $WipeType wipe initiated for device: $DeviceName\\\" -InformationAction Continue\\n        return $true\\n    }\\n    catch {\\n        Write-Information \\\"✗ Failed to wipe device $DeviceName : $($_.Exception.Message)\\\" -InformationAction Continue\\n        return $false\\n    }\\n}\\n\\n# Function to get devices by Entra ID group\\nfunction Get-DevicesByEntraGroup {\\n    param([string]$GroupName)\\n    \\n    try {\\n        Write-Information \\\"Finding Entra ID group: $GroupName...\\\" -InformationAction Continue\\n        \\n        # Find the group\\n        $groupUri = \\\"https://graph.microsoft.com/v1.0/groups?`$filter=displayName eq '$GroupName'\\\"\\n        $groups = Get-MgGraphAllPage -Uri $groupUri\\n        \\n        if ($groups.Count -eq 0) {\\n            throw \\\"Group '$GroupName' not found\\\"\\n        }\\n        elseif ($groups.Count -gt 1) {\\n            throw \\\"Multiple groups found with name '$GroupName'. Please use a more specific name.\\\"\\n        }\\n        \\n        $group = $groups[0]\\n        Write-Information \\\"✓ Found group: $($group.displayName) (ID: $($group.id))\\\" -InformationAction Continue\\n        \\n        # Get group members\\n        Write-Information \\\"Retrieving group members...\\\" -InformationAction Continue\\n        $membersUri = \\\"https://graph.microsoft.com/v1.0/groups/$($group.id)/members\\\"\\n        $members = Get-MgGraphAllPage -Uri $membersUri\\n        \\n        Write-Information \\\"✓ Found $($members.Count) members in group\\\" -InformationAction Continue\\n        \\n        # Get all managed devices\\n        Write-Information \\\"Retrieving managed devices...\\\" -InformationAction Continue\\n        $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n        $allDevices = Get-MgGraphAllPage -Uri $devicesUri\\n        \\n        # Filter devices by group members\\n        $targetDevices = @()\\n        foreach ($device in $allDevices) {\\n            if ($device.userPrincipalName) {\\n                $userInGroup = $members | Where-Object { $_.userPrincipalName -eq $device.userPrincipalName -or $_.mail -eq $device.userPrincipalName }\\n                if ($userInGroup) {\\n                    $targetDevices += $device\\n                }\\n            }\\n        }\\n        \\n        Write-Information \\\"✓ Found $($targetDevices.Count) devices belonging to group members\\\" -InformationAction Continue\\n        return $targetDevices\\n    }\\n    catch {\\n        Write-Error \\\"Failed to get devices by Entra ID group: $($_.Exception.Message)\\\"\\n        return @()\\n    }\\n}\\n\\n# Function to display device information\\nfunction Show-DeviceDetail {\\n    param([array]$Devices)\\n    \\n    Write-Information \\\"`n📱 DEVICE DETAILS\\\" -InformationAction Continue\\n    Write-Information \\\"=================\\\" -InformationAction Continue\\n    \\n    foreach ($device in $Devices) {\\n        $lastSeen = if ($device.lastSyncDateTime) { \\n            [DateTime]$device.lastSyncDateTime \\n        }\\n        else { \\n            \\\"Never\\\" \\n        }\\n        \\n        Write-Information \\\"Device: $($device.deviceName)\\\" -InformationAction Continue\\n        Write-Information \\\"  User: $($device.userPrincipalName)\\\" -InformationAction Continue\\n        Write-Information \\\"  OS: $($device.operatingSystem) $($device.osVersion)\\\" -InformationAction Continue\\n        Write-Information \\\"  Model: $($device.model)\\\" -InformationAction Continue\\n        Write-Information \\\"  Last Seen: $lastSeen\\\" -InformationAction Continue\\n        Write-Information \\\"  ID: $($device.id)\\\" -InformationAction Continue\\n        Write-Information \\\"\\\" -InformationAction Continue\\n    }\\n}\\n\\n# Get target devices based on parameter set\\n$targetDevices = @()\\n\\nswitch ($PSCmdlet.ParameterSetName) {\\n    'DeviceNames' {\\n        Write-Information \\\"Retrieving devices by names...\\\" -InformationAction Continue\\n        $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n        $allDevices = Get-MgGraphAllPage -Uri $devicesUri\\n        \\n        foreach ($deviceName in $DeviceNames) {\\n            $matchingDevices = $allDevices | Where-Object { $_.deviceName -eq $deviceName }\\n            if ($matchingDevices) {\\n                $targetDevices += $matchingDevices\\n                Write-Information \\\"✓ Found device: $deviceName\\\" -InformationAction Continue\\n            }\\n            else {\\n                Write-Warning \\\"Device not found: $deviceName\\\"\\n            }\\n        }\\n    }\\n    \\n    'DeviceIds' {\\n        Write-Information \\\"Retrieving devices by IDs...\\\" -InformationAction Continue\\n        foreach ($deviceId in $DeviceIds) {\\n            try {\\n                $deviceUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices/$deviceId\\\"\\n                $device = Invoke-MgGraphRequest -Uri $deviceUri -Method GET\\n                $targetDevices += $device\\n                Write-Information \\\"✓ Found device: $($device.deviceName)\\\" -InformationAction Continue\\n            }\\n            catch {\\n                Write-Warning \\\"Device not found with ID: $deviceId\\\"\\n            }\\n        }\\n    }\\n    \\n    'EntraGroup' {\\n        $targetDevices = Get-DevicesByEntraGroup -GroupName $EntraGroupName\\n    }\\n}\\n\\nif ($targetDevices.Count -eq 0) {\\n    Write-Warning \\\"No target devices found. Exiting.\\\"\\n    Disconnect-MgGraph | Out-Null\\n    exit 0\\n}\\n\\n# Display target information\\nWrite-Information \\\"`n🚨 DEVICE WIPE OPERATION\\\" -InformationAction Continue\\nWrite-Information \\\"=========================\\\" -InformationAction Continue\\nWrite-Information \\\"Wipe Type: $WipeType\\\" -InformationAction Continue\\nWrite-Information \\\"Total devices to process: $($targetDevices.Count)\\\" -InformationAction Continue\\nWrite-Information \\\"Keep Enrollment Data: $KeepEnrollmentData\\\" -InformationAction Continue\\n\\nif ($WipeType -eq 'Full') {\\n    Write-Information \\\"⚠️  WARNING: Full wipe will completely erase all data on these devices!\\\" -InformationAction Continue\\n}\\nelse {\\n    Write-Information \\\"ℹ️  Selective wipe will remove only company data and apps\\\" -InformationAction Continue\\n}\\n\\n# Show device details\\nShow-DeviceDetail -Devices $targetDevices\\n\\n# Confirmation prompt unless Force is specified\\nif (-not $Force) {\\n    Write-Information \\\"`n🛑 CONFIRMATION REQUIRED\\\" -InformationAction Continue\\n    Write-Information \\\"This operation will perform a $($WipeType.ToLower()) wipe on $($targetDevices.Count) device(s).\\\" -InformationAction Continue\\n    \\n    if ($WipeType -eq 'Full') {\\n        Write-Information \\\"⚠️  THIS WILL PERMANENTLY DELETE ALL DATA ON THE DEVICES!\\\" -InformationAction Continue\\n    }\\n    \\n    $confirmation = Read-Host \\\"`nType 'CONFIRM' to proceed with the wipe operation\\\"\\n    \\n    if ($confirmation -ne 'CONFIRM') {\\n        Write-Information \\\"Operation cancelled by user.\\\" -InformationAction Continue\\n        Disconnect-MgGraph | Out-Null\\n        exit 0\\n    }\\n}\\n\\n# Process wipe operations\\n$successfulWipes = 0\\n$failedWipes = 0\\n$processedDevices = 0\\n\\nWrite-Information \\\"`n🔄 Processing device wipe operations...\\\" -InformationAction Continue\\n\\nforeach ($device in $targetDevices) {\\n    $processedDevices++\\n    Write-Progress -Activity \\\"Wiping Devices\\\" -Status \\\"Processing device $processedDevices of $($targetDevices.Count): $($device.deviceName)\\\" -PercentComplete (($processedDevices / $targetDevices.Count) * 100)\\n    \\n    $wipeSuccessful = Invoke-DeviceWipe -DeviceId $device.id -DeviceName $device.deviceName -WipeType $WipeType -KeepEnrollmentData $KeepEnrollmentData -PIN $PIN\\n    \\n    if ($wipeSuccessful) {\\n        $successfulWipes++\\n    }\\n    else {\\n        $failedWipes++\\n    }\\n    \\n    # Add delay between wipe operations\\n    if ($processedDevices -lt $targetDevices.Count) {\\n        Start-Sleep -Seconds $WipeDelaySeconds\\n    }\\n}\\n\\nWrite-Progress -Activity \\\"Wiping Devices\\\" -Completed\\n\\n# Display final summary\\nWrite-Information \\\"`n🔄 WIPE OPERATION SUMMARY\\\" -InformationAction Continue\\nWrite-Information \\\"=========================\\\" -InformationAction Continue\\nWrite-Information \\\"Wipe Type: $WipeType\\\" -InformationAction Continue\\nWrite-Information \\\"Total Devices Processed: $($targetDevices.Count)\\\" -InformationAction Continue\\nWrite-Information \\\"Successful Wipes: $successfulWipes\\\" -InformationAction Continue\\nWrite-Information \\\"Failed Wipes: $failedWipes\\\" -InformationAction Continue\\n\\n# Show failed devices if any\\nif ($failedWipes -gt 0) {\\n    Write-Information \\\"`n❌ Failed wipe operations require manual review.\\\" -InformationAction Continue\\n}\\n\\nif ($successfulWipes -gt 0) {\\n    Write-Information \\\"`n✅ $successfulWipes device(s) have been scheduled for $($WipeType.ToLower()) wipe.\\\" -InformationAction Continue\\n    Write-Information \\\"📋 Note: Wipe operations may take several minutes to complete on the devices.\\\" -InformationAction Continue\\n}\\n\\n# Disconnect from Microsoft Graph\\ntry {\\n    Disconnect-MgGraph | Out-Null\\n    Write-Information \\\"`n✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Warning \\\"Could not disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n}\\n\\nWrite-Information \\\"`n🎉 Device wipe operation completed!\\\" -InformationAction Continue ",
    "logVerbose": false,
    "runbookType": "PowerShell",
    "logProgress": false
  },
  "resources": [
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]",
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "draft": {
          "inEdit": false
        },
        "logVerbose": "[variables('logVerbose')]",
        "description": "[parameters('runbookDescription')]",
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]"
      }
    },
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]",
      "apiVersion": "2020-01-13-preview",
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ]
    }
  ],
  "parameters": {
    "runbookDescription": {
      "metadata": {
        "description": "Description of the runbook"
      },
      "defaultValue": "This script connects to Microsoft Graph and triggers remote wipe operations on targeted devices.",
      "type": "string"
    },
    "runbookName": {
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      },
      "defaultValue": "wipe-devices",
      "type": "string"
    },
    "automationAccountName": {
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      },
      "type": "string"
    }
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    }
  }
}
