{
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    }
  },
  "variables": {
    "scriptContent": "\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.Read.All,DeviceManagementConfiguration.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n<#\\n.TITLE\\n    Device Compliance Report\\n\\n.SYNOPSIS\\n    Generate a comprehensive device compliance report for managed devices in Intune.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph, retrieves managed devices and their compliance status,\\n    and generates a detailed report in both CSV and HTML formats. The report includes device details,\\n    compliance status, and summary statistics.\\n\\n.TAGS\\n    Devices,Compliance,Reporting\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All,DeviceManagementConfiguration.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\get-device-compliance-report.ps1\\n    Generates compliance reports for all managed devices\\n\\n.EXAMPLE\\n    .\\\\get-device-compliance-report.ps1 -OutputPath \\\"C:\\\\Reports\\\"\\n    Generates reports and saves them to the specified directory\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Large tenants may take several minutes to complete\\n    - Reports are saved in both CSV and HTML formats\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false)]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$OpenReport\\n)\\n\\n# Check if required module is installed\\nif (-not (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication)) {\\n    Write-Error \\\"Microsoft.Graph.Authentication module is required. Install it using: Install-Module Microsoft.Graph.Authentication -Scope CurrentUser\\\"\\n    exit 1\\n}\\n\\n# Import required module\\nImport-Module Microsoft.Graph.Authentication\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    Connect-MgGraph -Scopes \\\"DeviceManagementManagedDevices.Read.All\\\", \\\"DeviceManagementConfiguration.Read.All\\\" -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Function to get all pages of results\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [string]$Uri\\n    )\\n    \\n    $allResults = @()\\n    $nextLink = $Uri\\n    \\n    do {\\n        try {\\n            $response = Invoke-MgGraphRequest -Uri $nextLink -Method GET\\n            \\n            if ($response.value) {\\n                $allResults += $response.value\\n            }\\n            else {\\n                $allResults += $response\\n            }\\n            \\n            $nextLink = $response.'@odata.nextLink'\\n        }\\n        catch {\\n            Write-Warning \\\"Error fetching data from $nextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($nextLink)\\n    \\n    return $allResults\\n}\\n\\n# Get all managed devices\\ntry {\\n    Write-Information \\\"Retrieving managed devices...\\\" -InformationAction Continue\\n    $devices = Get-MgGraphAllPage -Uri \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n    Write-Information \\\"✓ Found $($devices.Count) managed devices\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to retrieve managed devices: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Get compliance policies\\ntry {\\n    Write-Information \\\"Retrieving compliance policies...\\\" -InformationAction Continue\\n    $compliancePolicies = Get-MgGraphAllPage -Uri \\\"https://graph.microsoft.com/v1.0/deviceManagement/deviceCompliancePolicies\\\"\\n    Write-Information \\\"✓ Found $($compliancePolicies.Count) compliance policies\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Warning \\\"Could not retrieve compliance policies: $($_.Exception.Message)\\\"\\n    $compliancePolicies = @()\\n}\\n\\n# Create report array\\n$report = @()\\n$processedCount = 0\\n\\nWrite-Information \\\"Processing device compliance data...\\\" -InformationAction Continue\\n\\nforeach ($device in $devices) {\\n    $processedCount++\\n    Write-Progress -Activity \\\"Processing Devices\\\" -Status \\\"Processing device $processedCount of $($devices.Count)\\\" -PercentComplete (($processedCount / $devices.Count) * 100)\\n    \\n    try {\\n        # Get device compliance details\\n        $complianceUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices('$($device.id)')/deviceCompliancePolicyStates\\\"\\n        $deviceCompliance = Get-MgGraphAllPage -Uri $complianceUri\\n        \\n        # Calculate compliance summary\\n        $compliantPolicies = ($deviceCompliance | Where-Object { $_.state -eq \\\"compliant\\\" }).Count\\n        $nonCompliantPolicies = ($deviceCompliance | Where-Object { $_.state -eq \\\"nonCompliant\\\" }).Count\\n        $errorPolicies = ($deviceCompliance | Where-Object { $_.state -eq \\\"error\\\" }).Count\\n        $totalPolicies = $deviceCompliance.Count\\n        \\n        # Determine overall compliance status\\n        $overallCompliance = if ($nonCompliantPolicies -gt 0 -or $errorPolicies -gt 0) { \\n            \\\"Non-Compliant\\\" \\n        }\\n        elseif ($compliantPolicies -gt 0) { \\n            \\\"Compliant\\\" \\n        }\\n        else { \\n            \\\"Unknown\\\" \\n        }\\n        \\n        # Calculate days since last sync\\n        $daysSinceSync = if ($device.lastSyncDateTime) {\\n            [math]::Round(((Get-Date) - [DateTime]$device.lastSyncDateTime).TotalDays, 1)\\n        }\\n        else {\\n            \\\"Never\\\"\\n        }\\n        \\n        # Create device report object\\n        $deviceInfo = [PSCustomObject]@{\\n            DeviceName                              = $device.deviceName\\n            UserPrincipalName                       = $device.userPrincipalName\\n            UserDisplayName                         = $device.userDisplayName\\n            OperatingSystem                         = $device.operatingSystem\\n            OSVersion                               = $device.osVersion\\n            Model                                   = $device.model\\n            Manufacturer                            = $device.manufacturer\\n            SerialNumber                            = $device.serialNumber\\n            OverallCompliance                       = $overallCompliance\\n            CompliantPolicies                       = $compliantPolicies\\n            NonCompliantPolicies                    = $nonCompliantPolicies\\n            ErrorPolicies                           = $errorPolicies\\n            TotalPolicies                           = $totalPolicies\\n            LastSyncDateTime                        = $device.lastSyncDateTime\\n            DaysSinceLastSync                       = $daysSinceSync\\n            EnrolledDateTime                        = $device.enrolledDateTime\\n            ManagementState                         = $device.managementState\\n            OwnerType                               = $device.managedDeviceOwnerType\\n            ComplianceGracePeriodExpirationDateTime = $device.complianceGracePeriodExpirationDateTime\\n            DeviceId                                = $device.id\\n        }\\n        \\n        $report += $deviceInfo\\n        \\n    }\\n    catch {\\n        Write-Warning \\\"Error processing device $($device.deviceName): $($_.Exception.Message)\\\"\\n    }\\n}\\n\\nWrite-Progress -Activity \\\"Processing Devices\\\" -Completed\\n\\n# Generate timestamp for file names\\n$timestamp = Get-Date -Format \\\"yyyy-MM-dd_HH-mm-ss\\\"\\n$csvPath = Join-Path $OutputPath \\\"Intune_Device_Compliance_Report_$timestamp.csv\\\"\\n$htmlPath = Join-Path $OutputPath \\\"Intune_Device_Compliance_Report_$timestamp.html\\\"\\n\\n# Export to CSV\\ntry {\\n    $report | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8\\n    Write-Information \\\"✓ CSV report saved: $csvPath\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to save CSV report: $($_.Exception.Message)\\\"\\n}\\n\\n# Generate HTML report\\ntry {\\n    $htmlContent = @\\\"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Intune Device Compliance Report</title>\\n    <style>\\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background-color: #f5f5f5; }\\n        .header { background-color: #0078d4; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\\n        .summary { background-color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\\n        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }\\n        .summary-item { text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 4px; }\\n        .summary-number { font-size: 24px; font-weight: bold; color: #0078d4; }\\n        table { width: 100%; border-collapse: collapse; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\\n        th { background-color: #0078d4; color: white; padding: 12px; text-align: left; font-weight: 600; }\\n        td { padding: 10px 12px; border-bottom: 1px solid #e1e5e9; }\\n        tr:nth-child(even) { background-color: #f8f9fa; }\\n        tr:hover { background-color: #e3f2fd; }\\n        .compliant { color: #28a745; font-weight: bold; }\\n        .non-compliant { color: #dc3545; font-weight: bold; }\\n        .unknown { color: #6c757d; font-weight: bold; }\\n        .footer { margin-top: 20px; text-align: center; color: #6c757d; font-size: 12px; }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"header\\\">\\n        <h1>Intune Device Compliance Report</h1>\\n        <p>Generated on: $(Get-Date -Format \\\"dddd, MMMM dd, yyyy 'at' HH:mm:ss\\\")</p>\\n    </div>\\n    \\n    <div class=\\\"summary\\\">\\n        <h2>Summary</h2>\\n        <div class=\\\"summary-grid\\\">\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$($report.Count)</div>\\n                <div>Total Devices</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$(($report | Where-Object { $_.OverallCompliance -eq 'Compliant' }).Count)</div>\\n                <div>Compliant Devices</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$(($report | Where-Object { $_.OverallCompliance -eq 'Non-Compliant' }).Count)</div>\\n                <div>Non-Compliant Devices</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$(($report | Where-Object { $_.DaysSinceLastSync -ne 'Never' -and [double]$_.DaysSinceLastSync -gt 7 }).Count)</div>\\n                <div>Stale Devices (>7 days)</div>\\n            </div>\\n        </div>\\n    </div>\\n\\\"@\\n\\n    # Add table\\n    $htmlContent += \\\"<table><thead><tr>\\\"\\n    $htmlContent += \\\"<th>Device Name</th><th>User</th><th>OS</th><th>Compliance Status</th><th>Compliant Policies</th><th>Non-Compliant Policies</th><th>Last Sync</th><th>Days Since Sync</th>\\\"\\n    $htmlContent += \\\"</tr></thead><tbody>\\\"\\n    \\n    foreach ($device in $report | Sort-Object DeviceName) {\\n        $complianceClass = switch ($device.OverallCompliance) {\\n            \\\"Compliant\\\" { \\\"compliant\\\" }\\n            \\\"Non-Compliant\\\" { \\\"non-compliant\\\" }\\n            default { \\\"unknown\\\" }\\n        }\\n        \\n        $htmlContent += \\\"<tr>\\\"\\n        $htmlContent += \\\"<td>$($device.DeviceName)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.UserDisplayName)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.OperatingSystem) $($device.OSVersion)</td>\\\"\\n        $htmlContent += \\\"<td class='$complianceClass'>$($device.OverallCompliance)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.CompliantPolicies)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.NonCompliantPolicies)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.LastSyncDateTime)</td>\\\"\\n        $htmlContent += \\\"<td>$($device.DaysSinceLastSync)</td>\\\"\\n        $htmlContent += \\\"</tr>\\\"\\n    }\\n    \\n    $htmlContent += \\\"</tbody></table>\\\"\\n    $htmlContent += \\\"<div class='footer'>Report generated by Intune Device Compliance Script v1.0</div>\\\"\\n    $htmlContent += \\\"</body></html>\\\"\\n    \\n    $htmlContent | Out-File -FilePath $htmlPath -Encoding UTF8\\n    Write-Information \\\"✓ HTML report saved: $htmlPath\\\" -InformationAction Continue\\n    \\n    if ($OpenReport) {\\n        Start-Process $htmlPath\\n    }\\n    \\n}\\ncatch {\\n    Write-Error \\\"Failed to generate HTML report: $($_.Exception.Message)\\\"\\n}\\n\\n# Display summary\\nWrite-Output \\\"\\\"\\nWrite-Output \\\"📊 COMPLIANCE REPORT SUMMARY\\\"\\nWrite-Output \\\"================================\\\"\\nWrite-Output \\\"Total Devices: $($report.Count)\\\"\\nWrite-Output \\\"Compliant Devices: $(($report | Where-Object { $_.OverallCompliance -eq 'Compliant' }).Count)\\\"\\nWrite-Output \\\"Non-Compliant Devices: $(($report | Where-Object { $_.OverallCompliance -eq 'Non-Compliant' }).Count)\\\"\\nWrite-Output \\\"Unknown Status: $(($report | Where-Object { $_.OverallCompliance -eq 'Unknown' }).Count)\\\"\\nWrite-Output \\\"Stale Devices (>7 days): $(($report | Where-Object { $_.DaysSinceLastSync -ne 'Never' -and [double]$_.DaysSinceLastSync -gt 7 }).Count)\\\"\\n\\nWrite-Output \\\"\\\"\\nWrite-Output \\\"Reports saved to:\\\"\\nWrite-Output \\\"📄 CSV: $csvPath\\\"\\nWrite-Output \\\"🌐 HTML: $htmlPath\\\"\\n\\n# Disconnect from Microsoft Graph\\ntry {\\n    Disconnect-MgGraph | Out-Null\\n    Write-Information \\\"✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Warning \\\"Could not disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n}\\n\\nWrite-Output \\\"\\\"\\nWrite-Output \\\"🎉 Device compliance report generation completed successfully!\\\" ",
    "logProgress": false,
    "runbookType": "PowerShell",
    "logVerbose": false
  },
  "resources": [
    {
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "logProgress": "[variables('logProgress')]",
        "description": "[parameters('runbookDescription')]",
        "runbookType": "[variables('runbookType')]",
        "draft": {
          "inEdit": false
        },
        "logVerbose": "[variables('logVerbose')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]",
      "apiVersion": "2020-01-13-preview"
    },
    {
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ],
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]",
      "apiVersion": "2020-01-13-preview"
    }
  ],
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "runbookDescription": {
      "type": "string",
      "defaultValue": "This script connects to Microsoft Graph, retrieves managed devices and their compliance status,",
      "metadata": {
        "description": "Description of the runbook"
      }
    },
    "automationAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      }
    },
    "runbookName": {
      "type": "string",
      "defaultValue": "get-device-compliance-report",
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      }
    }
  }
}
