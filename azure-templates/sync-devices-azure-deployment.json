{
  "variables": {
    "runbookType": "PowerShell",
    "logProgress": false,
    "scriptContent": "\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.ReadWrite.All,DeviceManagementManagedDevices.Read.All,Group.Read.All,GroupMember.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n<#\\n.TITLE\\n    Sync Devices\\n\\n.SYNOPSIS\\n    Trigger synchronization on specific managed devices in Intune or devices in an Entra ID group.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and triggers synchronization operations on targeted devices.\\n    You can target devices by specific names, device IDs, or by Entra ID group membership.\\n    The script provides real-time feedback on sync operations and handles errors gracefully.\\n\\n.TAGS\\n    Operational,Devices\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.ReadWrite.All,DeviceManagementManagedDevices.Read.All,Group.Read.All,GroupMember.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\sync-devices.ps1 -DeviceNames \\\"LAPTOP001\\\",\\\"DESKTOP002\\\"\\n    Synchronizes specific devices by name\\n\\n.EXAMPLE\\n    .\\\\sync-devices.ps1 -DeviceIds \\\"12345678-1234-1234-1234-123456789012\\\",\\\"87654321-4321-4321-4321-210987654321\\\"\\n    Synchronizes specific devices by their Intune device IDs\\n\\n.EXAMPLE\\n    .\\\\sync-devices.ps1 -EntraGroupName \\\"IT Department Devices\\\"\\n    Synchronizes all devices belonging to users in the specified Entra ID group\\n\\n.EXAMPLE\\n    .\\\\sync-devices.ps1 -EntraGroupName \\\"Sales Team\\\" -ForceSync\\n    Forces synchronization of all devices for users in the Sales Team group\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Sync operations are triggered immediately but may take time to complete on the device\\n    - Use -ForceSync to override the 1-hour sync threshold\\n    - The script will show real-time progress and results\\n#>\\n\\n[CmdletBinding(DefaultParameterSetName = 'DeviceNames')]\\nparam(\\n    [Parameter(Mandatory = $true, ParameterSetName = 'DeviceNames')]\\n    [string[]]$DeviceNames,\\n    \\n    [Parameter(Mandatory = $true, ParameterSetName = 'DeviceIds')]\\n    [string[]]$DeviceIds,\\n    \\n    [Parameter(Mandatory = $true, ParameterSetName = 'EntraGroup')]\\n    [string]$EntraGroupName,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$ForceSync,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [int]$SyncDelaySeconds = 2\\n)\\n\\n# Check if required module is installed\\nif (-not (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication)) {\\n    Write-Error \\\"Microsoft.Graph.Authentication module is required. Install it using: Install-Module Microsoft.Graph.Authentication -Scope CurrentUser\\\"\\n    exit 1\\n}\\n\\n# Import required module\\nImport-Module Microsoft.Graph.Authentication\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $scopes = @(\\\"DeviceManagementManagedDevices.ReadWrite.All\\\", \\\"DeviceManagementManagedDevices.Read.All\\\")\\n    if ($PSCmdlet.ParameterSetName -eq 'EntraGroup') {\\n        $scopes += @(\\\"Group.Read.All\\\", \\\"GroupMember.Read.All\\\")\\n    }\\n    Connect-MgGraph -Scopes $scopes -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Function to get all pages of results\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $allResults = @()\\n    $nextLink = $Uri\\n    $requestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($requestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $response = Invoke-MgGraphRequest -Uri $nextLink -Method GET\\n            $requestCount++\\n            \\n            if ($response.value) {\\n                $allResults += $response.value\\n            }\\n            else {\\n                $allResults += $response\\n            }\\n            \\n            $nextLink = $response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $nextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($nextLink)\\n    \\n    return $allResults\\n}\\n\\n# Function to trigger device sync\\nfunction Invoke-DeviceSync {\\n    param(\\n        [string]$DeviceId,\\n        [string]$DeviceName\\n    )\\n    \\n    try {\\n        $syncUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices('$DeviceId')/syncDevice\\\"\\n        Invoke-MgGraphRequest -Uri $syncUri -Method POST\\n        Write-Information \\\"✓ Sync triggered successfully for device: $DeviceName\\\" -InformationAction Continue\\n        return $true\\n    }\\n    catch {\\n        Write-Information \\\"✗ Failed to sync device $DeviceName : $($_.Exception.Message)\\\" -InformationAction Continue\\n        return $false\\n    }\\n}\\n\\n# Function to get devices by Entra ID group\\nfunction Get-DevicesByEntraGroup {\\n    param([string]$GroupName)\\n    \\n    try {\\n        Write-Information \\\"Finding Entra ID group: $GroupName...\\\" -InformationAction Continue\\n        \\n        # Find the group\\n        $groupUri = \\\"https://graph.microsoft.com/v1.0/groups?`$filter=displayName eq '$GroupName'\\\"\\n        $groups = Get-MgGraphAllPage -Uri $groupUri\\n        \\n        if ($groups.Count -eq 0) {\\n            throw \\\"Group '$GroupName' not found\\\"\\n        }\\n        elseif ($groups.Count -gt 1) {\\n            throw \\\"Multiple groups found with name '$GroupName'. Please use a more specific name.\\\"\\n        }\\n        \\n        $group = $groups[0]\\n        Write-Information \\\"✓ Found group: $($group.displayName) (ID: $($group.id))\\\" -InformationAction Continue\\n        \\n        # Get group members\\n        Write-Information \\\"Retrieving group members...\\\" -InformationAction Continue\\n        $membersUri = \\\"https://graph.microsoft.com/v1.0/groups/$($group.id)/members\\\"\\n        $members = Get-MgGraphAllPage -Uri $membersUri\\n        \\n        Write-Information \\\"✓ Found $($members.Count) members in group\\\" -InformationAction Continue\\n        \\n        # Get all managed devices\\n        Write-Information \\\"Retrieving managed devices...\\\" -InformationAction Continue\\n        $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n        $allDevices = Get-MgGraphAllPage -Uri $devicesUri\\n        \\n        # Filter devices by group members\\n        $targetDevices = @()\\n        foreach ($device in $allDevices) {\\n            if ($device.userPrincipalName) {\\n                $userInGroup = $members | Where-Object { $_.userPrincipalName -eq $device.userPrincipalName -or $_.mail -eq $device.userPrincipalName }\\n                if ($userInGroup) {\\n                    $targetDevices += $device\\n                }\\n            }\\n        }\\n        \\n        Write-Information \\\"✓ Found $($targetDevices.Count) devices belonging to group members\\\" -InformationAction Continue\\n        return $targetDevices\\n    }\\n    catch {\\n        Write-Error \\\"Failed to get devices by Entra ID group: $($_.Exception.Message)\\\"\\n        return @()\\n    }\\n}\\n\\n# Get target devices based on parameter set\\n$targetDevices = @()\\n\\nswitch ($PSCmdlet.ParameterSetName) {\\n    'DeviceNames' {\\n        Write-Information \\\"Retrieving devices by names...\\\" -InformationAction Continue\\n        $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n        $allDevices = Get-MgGraphAllPage -Uri $devicesUri\\n        \\n        foreach ($deviceName in $DeviceNames) {\\n            $matchingDevices = $allDevices | Where-Object { $_.deviceName -eq $deviceName }\\n            if ($matchingDevices) {\\n                $targetDevices += $matchingDevices\\n                Write-Information \\\"✓ Found device: $deviceName\\\" -InformationAction Continue\\n            }\\n            else {\\n                Write-Warning \\\"Device not found: $deviceName\\\"\\n            }\\n        }\\n    }\\n    \\n    'DeviceIds' {\\n        Write-Information \\\"Retrieving devices by IDs...\\\" -InformationAction Continue\\n        foreach ($deviceId in $DeviceIds) {\\n            try {\\n                $deviceUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices/$deviceId\\\"\\n                $device = Invoke-MgGraphRequest -Uri $deviceUri -Method GET\\n                $targetDevices += $device\\n                Write-Information \\\"✓ Found device: $($device.deviceName)\\\" -InformationAction Continue\\n            }\\n            catch {\\n                Write-Warning \\\"Device not found with ID: $deviceId\\\"\\n            }\\n        }\\n    }\\n    \\n    'EntraGroup' {\\n        $targetDevices = Get-DevicesByEntraGroup -GroupName $EntraGroupName\\n    }\\n}\\n\\nif ($targetDevices.Count -eq 0) {\\n    Write-Warning \\\"No target devices found. Exiting.\\\"\\n    Disconnect-MgGraph | Out-Null\\n    exit 0\\n}\\n\\n# Display target information\\nWrite-Information \\\"`n📱 TARGET DEVICES SUMMARY\\\" -InformationAction Continue\\nWrite-Information \\\"=========================\\\" -InformationAction Continue\\nWrite-Information \\\"Total devices to process: $($targetDevices.Count)\\\" -InformationAction Continue\\n\\n# Process sync operations\\n$successfulSyncs = 0\\n$failedSyncs = 0\\n$skippedSyncs = 0\\n$processedDevices = 0\\n\\nWrite-Information \\\"`nProcessing device synchronization...\\\" -InformationAction Continue\\n\\nforeach ($device in $targetDevices) {\\n    $processedDevices++\\n    Write-Progress -Activity \\\"Synchronizing Devices\\\" -Status \\\"Processing device $processedDevices of $($targetDevices.Count): $($device.deviceName)\\\" -PercentComplete (($processedDevices / $targetDevices.Count) * 100)\\n    \\n    # Calculate time since last sync\\n    $hoursSinceSync = if ($device.lastSyncDateTime) {\\n        [math]::Round(((Get-Date) - [DateTime]$device.lastSyncDateTime).TotalHours, 1)\\n    }\\n    else {\\n        999\\n    }\\n    \\n    # Determine if sync should be triggered\\n    $shouldSync = $ForceSync -or $hoursSinceSync -gt 1 -or $null -eq $device.lastSyncDateTime\\n    \\n    if ($shouldSync) {\\n        $syncSuccessful = Invoke-DeviceSync -DeviceId $device.id -DeviceName $device.deviceName\\n        \\n        if ($syncSuccessful) {\\n            $successfulSyncs++\\n        }\\n        else {\\n            $failedSyncs++\\n        }\\n        \\n        # Add delay between sync operations to avoid overwhelming the service\\n        if ($processedDevices -lt $targetDevices.Count) {\\n            Start-Sleep -Seconds $SyncDelaySeconds\\n        }\\n    }\\n    else {\\n        Write-Information \\\"⏭️  Skipping $($device.deviceName) - synced $hoursSinceSync hours ago\\\" -InformationAction Continue\\n        $skippedSyncs++\\n    }\\n}\\n\\nWrite-Progress -Activity \\\"Synchronizing Devices\\\" -Completed\\n\\n# Display final summary\\nWrite-Information \\\"`n🔄 SYNC OPERATION SUMMARY\\\" -InformationAction Continue\\nWrite-Information \\\"=========================\\\" -InformationAction Continue\\nWrite-Information \\\"Total Devices Processed: $($targetDevices.Count)\\\" -InformationAction Continue\\nWrite-Information \\\"Successful Syncs: $successfulSyncs\\\" -InformationAction Continue\\nWrite-Information \\\"Failed Syncs: $failedSyncs\\\" -InformationAction Continue\\nWrite-Information \\\"Skipped Devices: $skippedSyncs\\\" -InformationAction Continue\\n\\n# Show failed devices if any\\nif ($failedSyncs -gt 0) {\\n    Write-Information \\\"`n❌ Failed sync operations require manual review.\\\" -InformationAction Continue\\n}\\n\\n# Disconnect from Microsoft Graph\\ntry {\\n    Disconnect-MgGraph | Out-Null\\n    Write-Information \\\"`n✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Warning \\\"Could not disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n}\\n\\nWrite-Information \\\"`n🎉 Device synchronization completed successfully!\\\" -InformationAction Continue\\n",
    "logVerbose": false
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    }
  },
  "resources": [
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]",
        "draft": {
          "inEdit": false
        },
        "description": "[parameters('runbookDescription')]",
        "logVerbose": "[variables('logVerbose')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]"
    },
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ],
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]"
    }
  ],
  "parameters": {
    "runbookDescription": {
      "defaultValue": "This script connects to Microsoft Graph and triggers synchronization operations on targeted devices.",
      "type": "string",
      "metadata": {
        "description": "Description of the runbook"
      }
    },
    "runbookName": {
      "defaultValue": "sync-devices",
      "type": "string",
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      }
    },
    "automationAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      }
    }
  },
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
}
