{
  "variables": {
    "runbookType": "PowerShell",
    "logProgress": false,
    "scriptContent": "<#\\n.TITLE\\n    Policy Changes Monitor\\n\\n.SYNOPSIS\\n    Monitor and report on recent changes to Policies in Microsoft Intune.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves recent changes to Policies\\n    configured in Intune. It checks audit logs for policy modifications, creations, deletions, and\\n    assignments within a specified time period. The script generates detailed reports in CSV format,\\n    highlighting policy changes with details about who made the changes, when they occurred, and\\n    what was modified. This helps administrators track configuration drift and maintain governance\\n    over device configuration policies.\\n\\n.TAGS\\n    Monitoring\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementApps.Read.All,DeviceManagementConfiguration.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1\\n    Generates a report of policy changes from the last 30 days\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -DaysBack 30 -OutputPath \\\"C:\\\\Reports\\\"\\n    Generates a report of policy changes from the last 30 days and saves to specified directory\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -OnlyShowChanges -SendEmailAlert -AlertEmailAddress \\\"admin@contoso.com\\\"\\n    Shows only modified policies and sends email alerts for changes\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Policies use modern configuration templates\\n    - Policies require beta Graph endpoint access\\n    - Audit data is available for up to 30 days by default\\n    - Critical for maintaining configuration governance and compliance\\n    - Monitor for unauthorized changes to security policies\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Number of days to look back for changes\\\")]\\n    [ValidateRange(1, 90)]\\n    [int]$DaysBack = 30,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show policies with changes\\\")]\\n    [switch]$OnlyShowChanges,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Send email alert for policy changes\\\")]\\n    [switch]$SendEmailAlert,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Email address to send alerts to\\\")]\\n    [string]$AlertEmailAddress = \\\"\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include detailed change information\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $(<#\\n.TITLE\\n    Policy Changes Monitor\\n\\n.SYNOPSIS\\n    Monitor and report on recent changes to Policies in Microsoft Intune.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves recent changes to Policies\\n    configured in Intune. It checks audit logs for policy modifications, creations, deletions, and\\n    assignments within a specified time period. The script generates detailed reports in CSV format,\\n    highlighting policy changes with details about who made the changes, when they occurred, and\\n    what was modified. This helps administrators track configuration drift and maintain governance\\n    over device configuration policies.\\n\\n.TAGS\\n    Monitoring\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementApps.Read.All,DeviceManagementConfiguration.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1\\n    Generates a report of policy changes from the last 30 days\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -DaysBack 30 -OutputPath \\\"C:\\\\Reports\\\"\\n    Generates a report of policy changes from the last 30 days and saves to specified directory\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -OnlyShowChanges -SendEmailAlert -AlertEmailAddress \\\"admin@contoso.com\\\"\\n    Shows only modified policies and sends email alerts for changes\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Policies use modern configuration templates\\n    - Policies require beta Graph endpoint access\\n    - Audit data is available for up to 30 days by default\\n    - Critical for maintaining configuration governance and compliance\\n    - Monitor for unauthorized changes to security policies\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Number of days to look back for changes\\\")]\\n    [ValidateRange(1, 90)]\\n    [int]$DaysBack = 30,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show policies with changes\\\")]\\n    [switch]$OnlyShowChanges,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Send email alert for policy changes\\\")]\\n    [switch]$SendEmailAlert,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Email address to send alerts to\\\")]\\n    [string]$AlertEmailAddress = \\\"\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include detailed change information\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModules = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModules) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModules) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementApps.Read.All\\\",\\n        \\\"DeviceManagementConfiguration.Read.All\\\"\\n    )\\n    $null = Connect-MgGraph -Scopes $Scopes -NoWelcome -ErrorAction SilentlyContinue\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to format change details\\nfunction Format-ChangeDetail {\\n    param(\\n        [object]$AuditLog\\n    )\\n    \\n    $ChangeDetails = @()\\n    \\n    if ($AuditLog.resources) {\\n        foreach ($Resource in $AuditLog.resources) {\\n            if ($Resource.modifiedProperties) {\\n                foreach ($Property in $Resource.modifiedProperties) {\\n                    $ChangeDetail = [PSCustomObject]@{\\n                        PropertyName = $Property.displayName\\n                        OldValue     = if ($Property.oldValue) { $Property.oldValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                        NewValue     = if ($Property.newValue) { $Property.newValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                    }\\n                    $ChangeDetails += $ChangeDetail\\n                }\\n            }\\n        }\\n    }\\n    \\n    return $ChangeDetails\\n}\\n\\n\\n\\n# Function to determine change severity\\nfunction Get-ChangeSeverity {\\n    param(\\n        [string]$Activity,\\n        [string]$Result\\n    )\\n    \\n    if ($Result -eq \\\"failure\\\") {\\n        return \\\"High\\\"\\n    }\\n    \\n    switch -Wildcard ($Activity) {\\n        \\\"*Delete*\\\" { return \\\"High\\\" }\\n        \\\"*Create*\\\" { return \\\"Medium\\\" }\\n        \\\"*Update*\\\" { return \\\"Medium\\\" }\\n        \\\"*Assign*\\\" { return \\\"Low\\\" }\\n        default { return \\\"Low\\\" }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting Policies changes analysis...\\\" -InformationAction Continue\\n    \\n    # Calculate start date\\n    $StartDate = (Get-Date).AddDays(-$DaysBack)\\n    $StartDateFormatted = $StartDate.ToString(\\\"yyyy-MM-ddTHH:mm:ssZ\\\")\\n    \\n    Write-Information \\\"Analyzing changes from: $($StartDate.ToString('yyyy-MM-dd HH:mm:ss'))\\\" -InformationAction Continue\\n    \\n    # ========================================================================\\n    # GET AUDIT LOGS FOR SETTINGS CATALOG CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Retrieving audit logs for Policies changes...\\\" -InformationAction Continue\\n    \\n    try {\\n        # Query for Policies changes (DeviceConfiguration category)\\n        $AuditLogsUri = \\\"https://graph.microsoft.com/beta/deviceManagement/auditEvents?`$filter=activityDateTime ge $StartDateFormatted and category eq 'DeviceConfiguration'&`$orderby=activityDateTime desc&`$top=50\\\"\\n        $AuditLogs = Get-MgGraphAllPage -Uri $AuditLogsUri\\n        \\n        Write-Information \\\"Retrieved $($AuditLogs.Count) DeviceConfiguration audit events\\\" -InformationAction Continue\\n        \\n        # Filter for Policies (DeviceManagementConfigurationPolicy) activities\\n        $PoliciesActivities = $AuditLogs | Where-Object { \\n            $_.activityType -like \\\"*DeviceManagementConfigurationPolicy*\\\"\\n        }\\n        \\n        Write-Information \\\"✓ Found $($PoliciesActivities.Count) policy changes\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to retrieve audit logs: $($_.Exception.Message)\\\"\\n        $PoliciesActivities = @()\\n    }\\n    \\n    # ========================================================================\\n    # FILTER AND PROCESS CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Processing Policies policy changes...\\\" -InformationAction Continue\\n    \\n    # Filter changes if OnlyShowChanges is specified\\n    if ($OnlyShowChanges) {\\n        $PoliciesActivities = $PoliciesActivities | Where-Object {\\n            $_.activityType -like \\\"*Update*\\\" -or $_.activityType -like \\\"*Modify*\\\"\\n        }\\n        Write-Information \\\"Filtered to show only policy modifications: $($PoliciesActivities.Count) changes\\\" -InformationAction Continue\\n    }\\n    \\n    # Get the last 5 changes\\n    $Last5Changes = $PoliciesActivities | Select-Object -First 5\\n    \\n    if ($Last5Changes.Count -eq 0) {\\n        Write-Information \\\"No Policies policy changes found in the specified time period.\\\" -InformationAction Continue\\n        return\\n    }\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"LAST 5 POLICIES POLICY CHANGES\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Prepare CSV data for export\\n    $CsvData = @()\\n    \\n    $ChangeNumber = 1\\n    foreach ($Change in $Last5Changes) {\\n        try {\\n            # Get policy name and user info\\n            $PolicyName = \\\"Unknown Policy\\\"\\n            $UserName = \\\"System\\\"\\n            \\n            if ($Change.resources -and $Change.resources.Count -gt 0) {\\n                $PolicyName = $Change.resources[0].displayName\\n            }\\n            \\n            if ($Change.actor -and $Change.actor.userPrincipalName) {\\n                $UserName = $Change.actor.userPrincipalName\\n            }\\n            \\n            Write-Information \\\"`n[$ChangeNumber] $($Change.activityDateTime)\\\" -InformationAction Continue\\n            Write-Information \\\"Policy: $PolicyName\\\" -InformationAction Continue\\n            Write-Information \\\"Action: $($Change.activityType)\\\" -InformationAction Continue\\n            Write-Information \\\"User: $UserName\\\" -InformationAction Continue\\n            Write-Information \\\"Result: $($Change.activityResult)\\\" -InformationAction Continue\\n            \\n            # Collect change details for CSV export\\n            $ChangeDetails = \\\"\\\"\\n            $Severity = Get-ChangeSeverity -Activity $Change.activityType -Result $Change.activityResult\\n            \\n            # Show modified properties (before/after values)\\n            if ($Change.resources -and $Change.resources[0].modifiedProperties) {\\n                Write-Information \\\"Changes:\\\" -InformationAction Continue\\n                $ChangeDetailsList = @()\\n                foreach ($Property in $Change.resources[0].modifiedProperties) {\\n                    $OldValue = if ($Property.oldValue) { $Property.oldValue } else { \\\"(empty)\\\" }\\n                    $NewValue = if ($Property.newValue) { $Property.newValue } else { \\\"(empty)\\\" }\\n                    Write-Information \\\"  - $($Property.displayName): '$OldValue' → '$NewValue'\\\" -InformationAction Continue\\n                    \\n                    if ($IncludeDetails) {\\n                        $ChangeDetailsList += \\\"$($Property.displayName): '$OldValue' → '$NewValue'\\\"\\n                    }\\n                }\\n                $ChangeDetails = $ChangeDetailsList -join \\\"; \\\"\\n            }\\n            else {\\n                Write-Information \\\"  No detailed change information available\\\" -InformationAction Continue\\n            }\\n            \\n            # Add to CSV data\\n            $CsvRecord = [PSCustomObject]@{\\n                DateTime   = $Change.activityDateTime\\n                PolicyName = $PolicyName\\n                Action     = $Change.activityType\\n                User       = $UserName\\n                Result     = $Change.activityResult\\n                Severity   = $Severity\\n                Details    = if ($IncludeDetails) { $ChangeDetails } else { \\\"\\\" }\\n            }\\n            $CsvData += $CsvRecord\\n            \\n            $ChangeNumber++\\n        }\\n        catch {\\n            Write-Warning \\\"Error processing change: $($_.Exception.Message)\\\"\\n            continue\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EXPORT TO CSV\\n    # ========================================================================\\n    \\n    if ($CsvData.Count -gt 0) {\\n        $OutputFile = Join-Path -Path $OutputPath -ChildPath \\\"PolicyChanges_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv\\\"\\n        try {\\n            $CsvData | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8\\n            Write-Information \\\"✓ Report exported to: $OutputFile\\\" -InformationAction Continue\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to export CSV report: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EMAIL ALERTS\\n    # ========================================================================\\n    \\n    if ($SendEmailAlert -and $AlertEmailAddress -and $CsvData.Count -gt 0) {\\n        try {\\n            $Subject = \\\"Policy Changes Alert - $($CsvData.Count) changes detected\\\"\\n            $Body = @\\\"\\nPolicy Changes Report\\n\\nTime Period: Last $DaysBack days\\nTotal Changes: $($CsvData.Count)\\n\\nRecent Changes:\\n$($CsvData | ForEach-Object { \\\"- $($_.DateTime): $($_.PolicyName) - $($_.Action) by $($_.User)\\\" } | Select-Object -First 10 | Out-String)\\n\\nFor full details, please check the attached CSV report or review the Intune audit logs.\\n\\\"@\\n            \\n            # Note: Email sending would require additional modules like Send-MailMessage or Microsoft Graph\\n            Write-Information \\\"Email alert prepared for: $AlertEmailAddress\\\" -InformationAction Continue\\n            Write-Information \\\"Subject: $Subject\\\" -InformationAction Continue\\n            Write-Warning \\\"Email sending functionality requires additional configuration (SMTP settings or Microsoft Graph permissions)\\\"\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to prepare email alert: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    Write-Information \\\"`n✓ Policies changes analysis completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Policies Changes Monitor\\nTime Period: Last $DaysBack days\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementApps.Read.All,DeviceManagementConfiguration.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $(<#\\n.TITLE\\n    Policy Changes Monitor\\n\\n.SYNOPSIS\\n    Monitor and report on recent changes to Policies in Microsoft Intune.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves recent changes to Policies\\n    configured in Intune. It checks audit logs for policy modifications, creations, deletions, and\\n    assignments within a specified time period. The script generates detailed reports in CSV format,\\n    highlighting policy changes with details about who made the changes, when they occurred, and\\n    what was modified. This helps administrators track configuration drift and maintain governance\\n    over device configuration policies.\\n\\n.TAGS\\n    Monitoring\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementApps.Read.All,DeviceManagementConfiguration.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1\\n    Generates a report of policy changes from the last 30 days\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -DaysBack 30 -OutputPath \\\"C:\\\\Reports\\\"\\n    Generates a report of policy changes from the last 30 days and saves to specified directory\\n\\n.EXAMPLE\\n    .\\\\check-policy-changes.ps1 -OnlyShowChanges -SendEmailAlert -AlertEmailAddress \\\"admin@contoso.com\\\"\\n    Shows only modified policies and sends email alerts for changes\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Policies use modern configuration templates\\n    - Policies require beta Graph endpoint access\\n    - Audit data is available for up to 30 days by default\\n    - Critical for maintaining configuration governance and compliance\\n    - Monitor for unauthorized changes to security policies\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Number of days to look back for changes\\\")]\\n    [ValidateRange(1, 90)]\\n    [int]$DaysBack = 30,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show policies with changes\\\")]\\n    [switch]$OnlyShowChanges,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Send email alert for policy changes\\\")]\\n    [switch]$SendEmailAlert,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Email address to send alerts to\\\")]\\n    [string]$AlertEmailAddress = \\\"\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include detailed change information\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModules = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModules) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModules) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementApps.Read.All\\\",\\n        \\\"DeviceManagementConfiguration.Read.All\\\"\\n    )\\n    $null = Connect-MgGraph -Scopes $Scopes -NoWelcome -ErrorAction SilentlyContinue\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to format change details\\nfunction Format-ChangeDetail {\\n    param(\\n        [object]$AuditLog\\n    )\\n    \\n    $ChangeDetails = @()\\n    \\n    if ($AuditLog.resources) {\\n        foreach ($Resource in $AuditLog.resources) {\\n            if ($Resource.modifiedProperties) {\\n                foreach ($Property in $Resource.modifiedProperties) {\\n                    $ChangeDetail = [PSCustomObject]@{\\n                        PropertyName = $Property.displayName\\n                        OldValue     = if ($Property.oldValue) { $Property.oldValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                        NewValue     = if ($Property.newValue) { $Property.newValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                    }\\n                    $ChangeDetails += $ChangeDetail\\n                }\\n            }\\n        }\\n    }\\n    \\n    return $ChangeDetails\\n}\\n\\n\\n\\n# Function to determine change severity\\nfunction Get-ChangeSeverity {\\n    param(\\n        [string]$Activity,\\n        [string]$Result\\n    )\\n    \\n    if ($Result -eq \\\"failure\\\") {\\n        return \\\"High\\\"\\n    }\\n    \\n    switch -Wildcard ($Activity) {\\n        \\\"*Delete*\\\" { return \\\"High\\\" }\\n        \\\"*Create*\\\" { return \\\"Medium\\\" }\\n        \\\"*Update*\\\" { return \\\"Medium\\\" }\\n        \\\"*Assign*\\\" { return \\\"Low\\\" }\\n        default { return \\\"Low\\\" }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting Policies changes analysis...\\\" -InformationAction Continue\\n    \\n    # Calculate start date\\n    $StartDate = (Get-Date).AddDays(-$DaysBack)\\n    $StartDateFormatted = $StartDate.ToString(\\\"yyyy-MM-ddTHH:mm:ssZ\\\")\\n    \\n    Write-Information \\\"Analyzing changes from: $($StartDate.ToString('yyyy-MM-dd HH:mm:ss'))\\\" -InformationAction Continue\\n    \\n    # ========================================================================\\n    # GET AUDIT LOGS FOR SETTINGS CATALOG CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Retrieving audit logs for Policies changes...\\\" -InformationAction Continue\\n    \\n    try {\\n        # Query for Policies changes (DeviceConfiguration category)\\n        $AuditLogsUri = \\\"https://graph.microsoft.com/beta/deviceManagement/auditEvents?`$filter=activityDateTime ge $StartDateFormatted and category eq 'DeviceConfiguration'&`$orderby=activityDateTime desc&`$top=50\\\"\\n        $AuditLogs = Get-MgGraphAllPage -Uri $AuditLogsUri\\n        \\n        Write-Information \\\"Retrieved $($AuditLogs.Count) DeviceConfiguration audit events\\\" -InformationAction Continue\\n        \\n        # Filter for Policies (DeviceManagementConfigurationPolicy) activities\\n        $PoliciesActivities = $AuditLogs | Where-Object { \\n            $_.activityType -like \\\"*DeviceManagementConfigurationPolicy*\\\"\\n        }\\n        \\n        Write-Information \\\"✓ Found $($PoliciesActivities.Count) policy changes\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to retrieve audit logs: $($_.Exception.Message)\\\"\\n        $PoliciesActivities = @()\\n    }\\n    \\n    # ========================================================================\\n    # FILTER AND PROCESS CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Processing Policies policy changes...\\\" -InformationAction Continue\\n    \\n    # Filter changes if OnlyShowChanges is specified\\n    if ($OnlyShowChanges) {\\n        $PoliciesActivities = $PoliciesActivities | Where-Object {\\n            $_.activityType -like \\\"*Update*\\\" -or $_.activityType -like \\\"*Modify*\\\"\\n        }\\n        Write-Information \\\"Filtered to show only policy modifications: $($PoliciesActivities.Count) changes\\\" -InformationAction Continue\\n    }\\n    \\n    # Get the last 5 changes\\n    $Last5Changes = $PoliciesActivities | Select-Object -First 5\\n    \\n    if ($Last5Changes.Count -eq 0) {\\n        Write-Information \\\"No Policies policy changes found in the specified time period.\\\" -InformationAction Continue\\n        return\\n    }\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"LAST 5 POLICIES POLICY CHANGES\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Prepare CSV data for export\\n    $CsvData = @()\\n    \\n    $ChangeNumber = 1\\n    foreach ($Change in $Last5Changes) {\\n        try {\\n            # Get policy name and user info\\n            $PolicyName = \\\"Unknown Policy\\\"\\n            $UserName = \\\"System\\\"\\n            \\n            if ($Change.resources -and $Change.resources.Count -gt 0) {\\n                $PolicyName = $Change.resources[0].displayName\\n            }\\n            \\n            if ($Change.actor -and $Change.actor.userPrincipalName) {\\n                $UserName = $Change.actor.userPrincipalName\\n            }\\n            \\n            Write-Information \\\"`n[$ChangeNumber] $($Change.activityDateTime)\\\" -InformationAction Continue\\n            Write-Information \\\"Policy: $PolicyName\\\" -InformationAction Continue\\n            Write-Information \\\"Action: $($Change.activityType)\\\" -InformationAction Continue\\n            Write-Information \\\"User: $UserName\\\" -InformationAction Continue\\n            Write-Information \\\"Result: $($Change.activityResult)\\\" -InformationAction Continue\\n            \\n            # Collect change details for CSV export\\n            $ChangeDetails = \\\"\\\"\\n            $Severity = Get-ChangeSeverity -Activity $Change.activityType -Result $Change.activityResult\\n            \\n            # Show modified properties (before/after values)\\n            if ($Change.resources -and $Change.resources[0].modifiedProperties) {\\n                Write-Information \\\"Changes:\\\" -InformationAction Continue\\n                $ChangeDetailsList = @()\\n                foreach ($Property in $Change.resources[0].modifiedProperties) {\\n                    $OldValue = if ($Property.oldValue) { $Property.oldValue } else { \\\"(empty)\\\" }\\n                    $NewValue = if ($Property.newValue) { $Property.newValue } else { \\\"(empty)\\\" }\\n                    Write-Information \\\"  - $($Property.displayName): '$OldValue' → '$NewValue'\\\" -InformationAction Continue\\n                    \\n                    if ($IncludeDetails) {\\n                        $ChangeDetailsList += \\\"$($Property.displayName): '$OldValue' → '$NewValue'\\\"\\n                    }\\n                }\\n                $ChangeDetails = $ChangeDetailsList -join \\\"; \\\"\\n            }\\n            else {\\n                Write-Information \\\"  No detailed change information available\\\" -InformationAction Continue\\n            }\\n            \\n            # Add to CSV data\\n            $CsvRecord = [PSCustomObject]@{\\n                DateTime   = $Change.activityDateTime\\n                PolicyName = $PolicyName\\n                Action     = $Change.activityType\\n                User       = $UserName\\n                Result     = $Change.activityResult\\n                Severity   = $Severity\\n                Details    = if ($IncludeDetails) { $ChangeDetails } else { \\\"\\\" }\\n            }\\n            $CsvData += $CsvRecord\\n            \\n            $ChangeNumber++\\n        }\\n        catch {\\n            Write-Warning \\\"Error processing change: $($_.Exception.Message)\\\"\\n            continue\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EXPORT TO CSV\\n    # ========================================================================\\n    \\n    if ($CsvData.Count -gt 0) {\\n        $OutputFile = Join-Path -Path $OutputPath -ChildPath \\\"PolicyChanges_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv\\\"\\n        try {\\n            $CsvData | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8\\n            Write-Information \\\"✓ Report exported to: $OutputFile\\\" -InformationAction Continue\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to export CSV report: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EMAIL ALERTS\\n    # ========================================================================\\n    \\n    if ($SendEmailAlert -and $AlertEmailAddress -and $CsvData.Count -gt 0) {\\n        try {\\n            $Subject = \\\"Policy Changes Alert - $($CsvData.Count) changes detected\\\"\\n            $Body = @\\\"\\nPolicy Changes Report\\n\\nTime Period: Last $DaysBack days\\nTotal Changes: $($CsvData.Count)\\n\\nRecent Changes:\\n$($CsvData | ForEach-Object { \\\"- $($_.DateTime): $($_.PolicyName) - $($_.Action) by $($_.User)\\\" } | Select-Object -First 10 | Out-String)\\n\\nFor full details, please check the attached CSV report or review the Intune audit logs.\\n\\\"@\\n            \\n            # Note: Email sending would require additional modules like Send-MailMessage or Microsoft Graph\\n            Write-Information \\\"Email alert prepared for: $AlertEmailAddress\\\" -InformationAction Continue\\n            Write-Information \\\"Subject: $Subject\\\" -InformationAction Continue\\n            Write-Warning \\\"Email sending functionality requires additional configuration (SMTP settings or Microsoft Graph permissions)\\\"\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to prepare email alert: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    Write-Information \\\"`n✓ Policies changes analysis completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Policies Changes Monitor\\nTime Period: Last $DaysBack days\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        exit 1\\n    }\\n}# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to format change details\\nfunction Format-ChangeDetail {\\n    param(\\n        [object]$AuditLog\\n    )\\n    \\n    $ChangeDetails = @()\\n    \\n    if ($AuditLog.resources) {\\n        foreach ($Resource in $AuditLog.resources) {\\n            if ($Resource.modifiedProperties) {\\n                foreach ($Property in $Resource.modifiedProperties) {\\n                    $ChangeDetail = [PSCustomObject]@{\\n                        PropertyName = $Property.displayName\\n                        OldValue     = if ($Property.oldValue) { $Property.oldValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                        NewValue     = if ($Property.newValue) { $Property.newValue -replace \\\"`n\\\", \\\" \\\" } else { \\\"N/A\\\" }\\n                    }\\n                    $ChangeDetails += $ChangeDetail\\n                }\\n            }\\n        }\\n    }\\n    \\n    return $ChangeDetails\\n}\\n\\n\\n\\n# Function to determine change severity\\nfunction Get-ChangeSeverity {\\n    param(\\n        [string]$Activity,\\n        [string]$Result\\n    )\\n    \\n    if ($Result -eq \\\"failure\\\") {\\n        return \\\"High\\\"\\n    }\\n    \\n    switch -Wildcard ($Activity) {\\n        \\\"*Delete*\\\" { return \\\"High\\\" }\\n        \\\"*Create*\\\" { return \\\"Medium\\\" }\\n        \\\"*Update*\\\" { return \\\"Medium\\\" }\\n        \\\"*Assign*\\\" { return \\\"Low\\\" }\\n        default { return \\\"Low\\\" }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting Policies changes analysis...\\\" -InformationAction Continue\\n    \\n    # Calculate start date\\n    $StartDate = (Get-Date).AddDays(-$DaysBack)\\n    $StartDateFormatted = $StartDate.ToString(\\\"yyyy-MM-ddTHH:mm:ssZ\\\")\\n    \\n    Write-Information \\\"Analyzing changes from: $($StartDate.ToString('yyyy-MM-dd HH:mm:ss'))\\\" -InformationAction Continue\\n    \\n    # ========================================================================\\n    # GET AUDIT LOGS FOR SETTINGS CATALOG CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Retrieving audit logs for Policies changes...\\\" -InformationAction Continue\\n    \\n    try {\\n        # Query for Policies changes (DeviceConfiguration category)\\n        $AuditLogsUri = \\\"https://graph.microsoft.com/beta/deviceManagement/auditEvents?`$filter=activityDateTime ge $StartDateFormatted and category eq 'DeviceConfiguration'&`$orderby=activityDateTime desc&`$top=50\\\"\\n        $AuditLogs = Get-MgGraphAllPage -Uri $AuditLogsUri\\n        \\n        Write-Information \\\"Retrieved $($AuditLogs.Count) DeviceConfiguration audit events\\\" -InformationAction Continue\\n        \\n        # Filter for Policies (DeviceManagementConfigurationPolicy) activities\\n        $PoliciesActivities = $AuditLogs | Where-Object { \\n            $_.activityType -like \\\"*DeviceManagementConfigurationPolicy*\\\"\\n        }\\n        \\n        Write-Information \\\"✓ Found $($PoliciesActivities.Count) policy changes\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to retrieve audit logs: $($_.Exception.Message)\\\"\\n        $PoliciesActivities = @()\\n    }\\n    \\n    # ========================================================================\\n    # FILTER AND PROCESS CHANGES\\n    # ========================================================================\\n    \\n    Write-Information \\\"Processing Policies policy changes...\\\" -InformationAction Continue\\n    \\n    # Filter changes if OnlyShowChanges is specified\\n    if ($OnlyShowChanges) {\\n        $PoliciesActivities = $PoliciesActivities | Where-Object {\\n            $_.activityType -like \\\"*Update*\\\" -or $_.activityType -like \\\"*Modify*\\\"\\n        }\\n        Write-Information \\\"Filtered to show only policy modifications: $($PoliciesActivities.Count) changes\\\" -InformationAction Continue\\n    }\\n    \\n    # Get the last 5 changes\\n    $Last5Changes = $PoliciesActivities | Select-Object -First 5\\n    \\n    if ($Last5Changes.Count -eq 0) {\\n        Write-Information \\\"No Policies policy changes found in the specified time period.\\\" -InformationAction Continue\\n        return\\n    }\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"LAST 5 POLICIES POLICY CHANGES\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Prepare CSV data for export\\n    $CsvData = @()\\n    \\n    $ChangeNumber = 1\\n    foreach ($Change in $Last5Changes) {\\n        try {\\n            # Get policy name and user info\\n            $PolicyName = \\\"Unknown Policy\\\"\\n            $UserName = \\\"System\\\"\\n            \\n            if ($Change.resources -and $Change.resources.Count -gt 0) {\\n                $PolicyName = $Change.resources[0].displayName\\n            }\\n            \\n            if ($Change.actor -and $Change.actor.userPrincipalName) {\\n                $UserName = $Change.actor.userPrincipalName\\n            }\\n            \\n            Write-Information \\\"`n[$ChangeNumber] $($Change.activityDateTime)\\\" -InformationAction Continue\\n            Write-Information \\\"Policy: $PolicyName\\\" -InformationAction Continue\\n            Write-Information \\\"Action: $($Change.activityType)\\\" -InformationAction Continue\\n            Write-Information \\\"User: $UserName\\\" -InformationAction Continue\\n            Write-Information \\\"Result: $($Change.activityResult)\\\" -InformationAction Continue\\n            \\n            # Collect change details for CSV export\\n            $ChangeDetails = \\\"\\\"\\n            $Severity = Get-ChangeSeverity -Activity $Change.activityType -Result $Change.activityResult\\n            \\n            # Show modified properties (before/after values)\\n            if ($Change.resources -and $Change.resources[0].modifiedProperties) {\\n                Write-Information \\\"Changes:\\\" -InformationAction Continue\\n                $ChangeDetailsList = @()\\n                foreach ($Property in $Change.resources[0].modifiedProperties) {\\n                    $OldValue = if ($Property.oldValue) { $Property.oldValue } else { \\\"(empty)\\\" }\\n                    $NewValue = if ($Property.newValue) { $Property.newValue } else { \\\"(empty)\\\" }\\n                    Write-Information \\\"  - $($Property.displayName): '$OldValue' → '$NewValue'\\\" -InformationAction Continue\\n                    \\n                    if ($IncludeDetails) {\\n                        $ChangeDetailsList += \\\"$($Property.displayName): '$OldValue' → '$NewValue'\\\"\\n                    }\\n                }\\n                $ChangeDetails = $ChangeDetailsList -join \\\"; \\\"\\n            }\\n            else {\\n                Write-Information \\\"  No detailed change information available\\\" -InformationAction Continue\\n            }\\n            \\n            # Add to CSV data\\n            $CsvRecord = [PSCustomObject]@{\\n                DateTime   = $Change.activityDateTime\\n                PolicyName = $PolicyName\\n                Action     = $Change.activityType\\n                User       = $UserName\\n                Result     = $Change.activityResult\\n                Severity   = $Severity\\n                Details    = if ($IncludeDetails) { $ChangeDetails } else { \\\"\\\" }\\n            }\\n            $CsvData += $CsvRecord\\n            \\n            $ChangeNumber++\\n        }\\n        catch {\\n            Write-Warning \\\"Error processing change: $($_.Exception.Message)\\\"\\n            continue\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EXPORT TO CSV\\n    # ========================================================================\\n    \\n    if ($CsvData.Count -gt 0) {\\n        $OutputFile = Join-Path -Path $OutputPath -ChildPath \\\"PolicyChanges_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv\\\"\\n        try {\\n            $CsvData | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8\\n            Write-Information \\\"✓ Report exported to: $OutputFile\\\" -InformationAction Continue\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to export CSV report: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    # ========================================================================\\n    # EMAIL ALERTS\\n    # ========================================================================\\n    \\n    if ($SendEmailAlert -and $AlertEmailAddress -and $CsvData.Count -gt 0) {\\n        try {\\n            $Subject = \\\"Policy Changes Alert - $($CsvData.Count) changes detected\\\"\\n            $Body = @\\\"\\nPolicy Changes Report\\n\\nTime Period: Last $DaysBack days\\nTotal Changes: $($CsvData.Count)\\n\\nRecent Changes:\\n$($CsvData | ForEach-Object { \\\"- $($_.DateTime): $($_.PolicyName) - $($_.Action) by $($_.User)\\\" } | Select-Object -First 10 | Out-String)\\n\\nFor full details, please check the attached CSV report or review the Intune audit logs.\\n\\\"@\\n            \\n            # Note: Email sending would require additional modules like Send-MailMessage or Microsoft Graph\\n            Write-Information \\\"Email alert prepared for: $AlertEmailAddress\\\" -InformationAction Continue\\n            Write-Information \\\"Subject: $Subject\\\" -InformationAction Continue\\n            Write-Warning \\\"Email sending functionality requires additional configuration (SMTP settings or Microsoft Graph permissions)\\\"\\n        }\\n        catch {\\n            Write-Warning \\\"Failed to prepare email alert: $($_.Exception.Message)\\\"\\n        }\\n    }\\n    \\n    Write-Information \\\"`n✓ Policies changes analysis completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Warning \\\"Failed to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Policies Changes Monitor\\nTime Period: Last $DaysBack days\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue ",
    "logVerbose": false
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    }
  },
  "resources": [
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]",
        "draft": {
          "inEdit": false
        },
        "description": "[parameters('runbookDescription')]",
        "logVerbose": "[variables('logVerbose')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]"
    },
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ],
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]"
    }
  ],
  "parameters": {
    "runbookDescription": {
      "defaultValue": "This script connects to Microsoft Graph and retrieves recent changes to Policies",
      "type": "string",
      "metadata": {
        "description": "Description of the runbook"
      }
    },
    "runbookName": {
      "defaultValue": "check-policy-changes",
      "type": "string",
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      }
    },
    "automationAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      }
    }
  },
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
}
