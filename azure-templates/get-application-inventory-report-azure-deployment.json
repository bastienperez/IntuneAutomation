{
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "variables": {
    "scriptContent": "\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $($_.Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.Read.All,DeviceManagementApps.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n        exit 1\\n    }\\n}\\n\\n<#\\n.TITLE\\n    Application Inventory Report\\n\\n.SYNOPSIS\\n    Generate a comprehensive application inventory report for all managed devices in Intune.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph, retrieves all managed devices and their installed applications,\\n    and generates detailed reports in both CSV and HTML formats. The report includes application details,\\n    installation status, version information, and summary statistics across the entire device fleet.\\n\\n.TAGS\\n    Apps,Reporting,Devices\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All,DeviceManagementApps.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\get-application-inventory-report.ps1\\n    Generates application inventory reports for all managed devices\\n\\n.EXAMPLE\\n    .\\\\get-application-inventory-report.ps1 -OutputPath \\\"C:\\\\Reports\\\" -IncludeSystemApps\\n    Generates reports including system applications and saves them to the specified directory\\n\\n.EXAMPLE\\n    .\\\\get-application-inventory-report.ps1 -FilterByPublisher \\\"Microsoft Corporation\\\" -OpenReport\\n    Generates reports filtered by Microsoft applications and opens the HTML report\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - Requires appropriate permissions in Azure AD\\n    - Large tenants may take considerable time to complete due to API rate limits\\n    - Reports are saved in both CSV and HTML formats\\n    - System applications are excluded by default to focus on business applications\\n    - Uses beta endpoint for enhanced application data\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false)]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$IncludeSystemApps,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [string]$FilterByPublisher = \\\"\\\",\\n    \\n    [Parameter(Mandatory = $false)]\\n    [string]$FilterByAppName = \\\"\\\",\\n    \\n    [Parameter(Mandatory = $false)]\\n    [switch]$OpenReport,\\n    \\n    [Parameter(Mandatory = $false)]\\n    [int]$MaxDevices = 0\\n)\\n\\n# Check if required module is installed\\nif (-not (Get-Module -ListAvailable -Name Microsoft.Graph.Authentication)) {\\n    Write-Error \\\"Microsoft.Graph.Authentication module is required. Install it using: Install-Module Microsoft.Graph.Authentication -Scope CurrentUser\\\"\\n    exit 1\\n}\\n\\n# Import required module\\nImport-Module Microsoft.Graph.Authentication\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    Connect-MgGraph -Scopes \\\"DeviceManagementManagedDevices.Read.All\\\", \\\"DeviceManagementApps.Read.All\\\" -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Function to get all pages of results with rate limiting\\nfunction Get-MgGraphAllPage {\\n    param(\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $allResults = @()\\n    $nextLink = $Uri\\n    $requestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($requestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $response = Invoke-MgGraphRequest -Uri $nextLink -Method GET\\n            $requestCount++\\n            \\n            if ($response.value) {\\n                $allResults += $response.value\\n            }\\n            else {\\n                $allResults += $response\\n            }\\n            \\n            $nextLink = $response.'@odata.nextLink'\\n            \\n            # Show progress for large datasets\\n            if ($requestCount % 10 -eq 0) {\\n                Write-Information \\\".\\\" -InformationAction Continue\\n            }\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $nextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($nextLink)\\n    \\n    return $allResults\\n}\\n\\n# System applications to exclude by default\\n$SystemApps = @(\\n    \\\"Microsoft.Windows.*\\\",\\n    \\\"Microsoft.VCLibs.*\\\",\\n    \\\"Microsoft.NET.*\\\",\\n    \\\"Microsoft.UI.*\\\",\\n    \\\"Microsoft.Services.*\\\",\\n    \\\"Microsoft.Advertising.*\\\",\\n    \\\"Microsoft.MicrosoftEdge.*\\\",\\n    \\\"Windows.*\\\",\\n    \\\"InputApp\\\",\\n    \\\"Microsoft.AAD.*\\\",\\n    \\\"Microsoft.AccountsControl\\\",\\n    \\\"Microsoft.AsyncTextService\\\",\\n    \\\"Microsoft.BioEnrollment\\\",\\n    \\\"Microsoft.CredDialogHost\\\",\\n    \\\"Microsoft.ECApp\\\",\\n    \\\"Microsoft.LockApp\\\",\\n    \\\"Microsoft.MicrosoftEdgeDevToolsClient\\\",\\n    \\\"Microsoft.Win32WebViewHost\\\",\\n    \\\"Microsoft.Windows.Apprep.ChxApp\\\",\\n    \\\"Microsoft.Windows.AssignedAccessLockApp\\\",\\n    \\\"Microsoft.Windows.CapturePicker\\\",\\n    \\\"Microsoft.Windows.CloudExperienceHost\\\",\\n    \\\"Microsoft.Windows.ContentDeliveryManager\\\",\\n    \\\"Microsoft.Windows.Cortana\\\",\\n    \\\"Microsoft.Windows.NarratorQuickStart\\\",\\n    \\\"Microsoft.Windows.ParentalControls\\\",\\n    \\\"Microsoft.Windows.PeopleExperienceHost\\\",\\n    \\\"Microsoft.Windows.PinningConfirmationDialog\\\",\\n    \\\"Microsoft.Windows.SecHealthUI\\\",\\n    \\\"Microsoft.Windows.SecureAssessmentBrowser\\\",\\n    \\\"Microsoft.Windows.ShellExperienceHost\\\",\\n    \\\"Microsoft.Windows.XGpuEjectDialog\\\",\\n    \\\"Microsoft.XboxGameCallableUI\\\"\\n)\\n\\n# Get all managed devices\\ntry {\\n    Write-Information \\\"Retrieving managed devices...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n    if ($MaxDevices -gt 0) {\\n        $devicesUri += \\\"?`$top=$MaxDevices\\\"\\n    }\\n    $devices = Get-MgGraphAllPage -Uri $devicesUri\\n    Write-Information \\\"`n✓ Found $($devices.Count) managed devices\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to retrieve managed devices: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# Create application inventory array\\n$applicationInventory = @()\\n$processedDevices = 0\\n$totalApplications = 0\\n\\nWrite-Information \\\"Processing device applications...\\\" -InformationAction Continue\\n\\nforeach ($device in $devices) {\\n    $processedDevices++\\n    Write-Progress -Activity \\\"Processing Device Applications\\\" -Status \\\"Processing device $processedDevices of $($devices.Count): $($device.deviceName)\\\" -PercentComplete (($processedDevices / $devices.Count) * 100)\\n    \\n    try {\\n        # Use the beta endpoint with expand to get detected apps for each device\\n        $deviceAppsUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices/$($device.id)?`$expand=detectedApps\\\"\\n        Write-Verbose \\\"Processing device: $($device.deviceName) (ID: $($device.id))\\\" -Verbose\\n        Write-Verbose \\\"API URL: $deviceAppsUri\\\" -Verbose\\n        $deviceWithApps = Invoke-MgGraphRequest -Uri $deviceAppsUri -Method GET\\n        \\n        if ($deviceWithApps.detectedApps) {\\n            foreach ($app in $deviceWithApps.detectedApps) {\\n                # Skip system apps if not included\\n                if (-not $IncludeSystemApps) {\\n                    $isSystemApp = $false\\n                    foreach ($systemApp in $SystemApps) {\\n                        if ($app.displayName -like $systemApp) {\\n                            $isSystemApp = $true\\n                            break\\n                        }\\n                    }\\n                    if ($isSystemApp) { continue }\\n                }\\n                \\n                # Apply filters if specified\\n                if ($FilterByPublisher -and $app.publisher -notlike \\\"*$FilterByPublisher*\\\") {\\n                    continue\\n                }\\n                \\n                if ($FilterByAppName -and $app.displayName -notlike \\\"*$FilterByAppName*\\\") {\\n                    continue\\n                }\\n                \\n                # Calculate days since last seen\\n                $daysSinceLastSeen = if ($device.lastSyncDateTime) {\\n                    [math]::Round(((Get-Date) - [DateTime]$device.lastSyncDateTime).TotalDays, 1)\\n                }\\n                else {\\n                    \\\"Never\\\"\\n                }\\n                \\n                # Create application inventory entry\\n                $appEntry = [PSCustomObject]@{\\n                    DeviceName          = $device.deviceName\\n                    DeviceId            = $device.id\\n                    UserPrincipalName   = $device.userPrincipalName\\n                    UserDisplayName     = $device.userDisplayName\\n                    OperatingSystem     = $device.operatingSystem\\n                    OSVersion           = $device.osVersion\\n                    ApplicationName     = $app.displayName\\n                    ApplicationVersion  = $app.version\\n                    Publisher           = if ($app.publisher) { $app.publisher } else { \\\"Unknown\\\" }\\n                    ApplicationSize     = if ($app.sizeInByte -and $app.sizeInByte -gt 0) { [math]::Round($app.sizeInByte / 1MB, 2) } else { \\\"Unknown\\\" }\\n                    ApplicationSizeUnit = if ($app.sizeInByte -and $app.sizeInByte -gt 0) { \\\"MB\\\" } else { \\\"N/A\\\" }\\n                    Platform            = if ($app.platform) { $app.platform } else { \\\"Unknown\\\" }\\n                    LastSyncDateTime    = $device.lastSyncDateTime\\n                    DaysSinceLastSync   = $daysSinceLastSeen\\n                    DeviceModel         = $device.model\\n                    DeviceManufacturer  = $device.manufacturer\\n                    EnrollmentType      = $device.managementState\\n                    OwnerType           = $device.managedDeviceOwnerType\\n                    ComplianceState     = $device.complianceState\\n                    ApplicationId       = $app.id\\n                }\\n                \\n                $applicationInventory += $appEntry\\n                $totalApplications++\\n            }\\n        }\\n        \\n        # Add a small delay to respect rate limits\\n        Start-Sleep -Milliseconds 100\\n    }\\n    catch {\\n        if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n            Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n            Start-Sleep -Seconds 60\\n            # Retry the same device\\n            $processedDevices--\\n            continue\\n        }\\n        Write-Warning \\\"Error processing applications for device $($device.deviceName): $($_.Exception.Message)\\\"\\n    }\\n}\\n\\nWrite-Progress -Activity \\\"Processing Device Applications\\\" -Completed\\n\\n# Generate summary statistics\\n$uniqueApplications = $applicationInventory | Group-Object ApplicationName | Measure-Object | Select-Object -ExpandProperty Count\\n$uniquePublishers = $applicationInventory | Group-Object Publisher | Measure-Object | Select-Object -ExpandProperty Count\\n$uniqueDevices = $applicationInventory | Group-Object DeviceName | Measure-Object | Select-Object -ExpandProperty Count\\n\\n# Get top applications by device count\\n$topApplications = $applicationInventory | Group-Object ApplicationName | \\nForEach-Object { \\n    [PSCustomObject]@{\\n        ApplicationName = $_.Name\\n        DeviceCount     = $_.Count\\n        UniqueVersions  = ($_.Group | Group-Object ApplicationVersion | Measure-Object).Count\\n        Publishers      = ($_.Group | Group-Object Publisher | Select-Object -First 1).Name\\n    }\\n} | Sort-Object DeviceCount -Descending | Select-Object -First 10\\n\\n# Get top publishers by application count\\n$topPublishers = $applicationInventory | Group-Object Publisher | \\nForEach-Object { \\n    [PSCustomObject]@{\\n        Publisher        = $_.Name\\n        ApplicationCount = ($_.Group | Group-Object ApplicationName | Measure-Object).Count\\n        DeviceCount      = $_.Count\\n    }\\n} | Sort-Object ApplicationCount -Descending | Select-Object -First 10\\n\\n# Generate timestamp for file names\\n$timestamp = Get-Date -Format \\\"yyyy-MM-dd_HH-mm-ss\\\"\\n$csvPath = Join-Path $OutputPath \\\"Intune_Application_Inventory_Report_$timestamp.csv\\\"\\n$htmlPath = Join-Path $OutputPath \\\"Intune_Application_Inventory_Report_$timestamp.html\\\"\\n\\n# Export to CSV\\ntry {\\n    $applicationInventory | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8\\n    Write-Information \\\"✓ CSV report saved: $csvPath\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to save CSV report: $($_.Exception.Message)\\\"\\n}\\n\\n# Generate HTML report\\ntry {\\n    $htmlContent = @\\\"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Intune Application Inventory Report</title>\\n    <style>\\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background-color: #f5f5f5; }\\n        .header { background-color: #0078d4; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\\n        .summary { background-color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\\n        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }\\n        .summary-item { text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 4px; }\\n        .summary-number { font-size: 24px; font-weight: bold; color: #0078d4; }\\n        .top-lists { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }\\n        .top-list { background-color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\\n        .top-list h3 { margin-top: 0; color: #0078d4; }\\n        .top-item { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e1e5e9; }\\n        .top-item:last-child { border-bottom: none; }\\n        table { width: 100%; border-collapse: collapse; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\\n        th { background-color: #0078d4; color: white; padding: 12px; text-align: left; font-weight: 600; position: sticky; top: 0; }\\n        td { padding: 10px 12px; border-bottom: 1px solid #e1e5e9; }\\n        tr:nth-child(even) { background-color: #f8f9fa; }\\n        tr:hover { background-color: #e3f2fd; }\\n        .footer { margin-top: 20px; text-align: center; color: #6c757d; font-size: 12px; }\\n        .filter-info { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; border-radius: 4px; margin-bottom: 20px; }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"header\\\">\\n        <h1>Intune Application Inventory Report</h1>\\n        <p>Generated on: $(Get-Date -Format \\\"dddd, MMMM dd, yyyy 'at' HH:mm:ss\\\")</p>\\n    </div>\\n\\\"@\\n\\n    # Add filter information if filters were applied\\n    if ($FilterByPublisher -or $FilterByAppName -or $IncludeSystemApps -or $MaxDevices -gt 0) {\\n        $htmlContent += \\\"<div class='filter-info'><strong>Applied Filters:</strong> \\\"\\n        if ($FilterByPublisher) { $htmlContent += \\\"Publisher: $FilterByPublisher | \\\" }\\n        if ($FilterByAppName) { $htmlContent += \\\"Application: $FilterByAppName | \\\" }\\n        if ($IncludeSystemApps) { $htmlContent += \\\"Including System Apps | \\\" }\\n        if ($MaxDevices -gt 0) { $htmlContent += \\\"Max Devices: $MaxDevices | \\\" }\\n        $htmlContent = $htmlContent.TrimEnd(\\\" | \\\") + \\\"</div>\\\"\\n    }\\n\\n    $htmlContent += @\\\"\\n    <div class=\\\"summary\\\">\\n        <h2>Summary</h2>\\n        <div class=\\\"summary-grid\\\">\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$totalApplications</div>\\n                <div>Total Application Instances</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$uniqueApplications</div>\\n                <div>Unique Applications</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$uniquePublishers</div>\\n                <div>Unique Publishers</div>\\n            </div>\\n            <div class=\\\"summary-item\\\">\\n                <div class=\\\"summary-number\\\">$uniqueDevices</div>\\n                <div>Devices with Applications</div>\\n            </div>\\n        </div>\\n        \\n        <div class=\\\"top-lists\\\">\\n            <div class=\\\"top-list\\\">\\n                <h3>Top 10 Applications by Device Count</h3>\\n\\\"@\\n\\n    foreach ($app in $topApplications) {\\n        $htmlContent += \\\"<div class='top-item'><span>$($app.ApplicationName)</span><span>$($app.DeviceCount) devices</span></div>\\\"\\n    }\\n\\n    $htmlContent += @\\\"\\n            </div>\\n            <div class=\\\"top-list\\\">\\n                <h3>Top 10 Publishers by Application Count</h3>\\n\\\"@\\n\\n    foreach ($publisher in $topPublishers) {\\n        $htmlContent += \\\"<div class='top-item'><span>$($publisher.Publisher)</span><span>$($publisher.ApplicationCount) apps</span></div>\\\"\\n    }\\n\\n    $htmlContent += @\\\"\\n            </div>\\n        </div>\\n    </div>\\n    \\n    <div class=\\\"summary\\\">\\n        <h2>Detailed Application Inventory</h2>\\n        <table>\\n            <thead>\\n                <tr>\\n                    <th>Device Name</th>\\n                    <th>User</th>\\n                    <th>Application Name</th>\\n                    <th>Version</th>\\n                    <th>Publisher</th>\\n                    <th>Platform</th>\\n                    <th>Size (MB)</th>\\n                    <th>OS</th>\\n                    <th>Last Sync</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n\\\"@\\n\\n    foreach ($app in $applicationInventory | Sort-Object DeviceName, ApplicationName) {\\n        $sizeDisplay = if ($app.ApplicationSize -ne \\\"Unknown\\\") { \\\"$($app.ApplicationSize) $($app.ApplicationSizeUnit)\\\" } else { \\\"Unknown\\\" }\\n        $htmlContent += @\\\"\\n                <tr>\\n                    <td>$($app.DeviceName)</td>\\n                    <td>$($app.UserDisplayName)</td>\\n                    <td>$($app.ApplicationName)</td>\\n                    <td>$($app.ApplicationVersion)</td>\\n                    <td>$($app.Publisher)</td>\\n                    <td>$($app.Platform)</td>\\n                    <td>$sizeDisplay</td>\\n                    <td>$($app.OperatingSystem) $($app.OSVersion)</td>\\n                    <td>$($app.LastSyncDateTime)</td>\\n                </tr>\\n\\\"@\\n    }\\n\\n    $htmlContent += @\\\"\\n            </tbody>\\n        </table>\\n    </div>\\n    \\n    <div class='footer'>Report generated by Intune Application Inventory Script v1.0</div>\\n</body>\\n</html>\\n\\\"@\\n\\n    $htmlContent | Out-File -FilePath $htmlPath -Encoding UTF8\\n    Write-Information \\\"✓ HTML report saved: $htmlPath\\\" -InformationAction Continue\\n    \\n    if ($OpenReport) {\\n        Start-Process $htmlPath\\n    }\\n}\\ncatch {\\n    Write-Error \\\"Failed to generate HTML report: $($_.Exception.Message)\\\"\\n}\\n\\n# Display summary\\nWrite-Output \\\"\\\"\\nWrite-Information \\\"📱 APPLICATION INVENTORY SUMMARY\\\" -InformationAction Continue\\nWrite-Information \\\"=================================\\\" -InformationAction Continue\\nWrite-Information \\\"Total Application Instances: $totalApplications\\\" -InformationAction Continue\\nWrite-Information \\\"Unique Applications: $uniqueApplications\\\" -InformationAction Continue\\nWrite-Information \\\"Unique Publishers: $uniquePublishers\\\" -InformationAction Continue\\nWrite-Information \\\"Devices Processed: $uniqueDevices\\\" -InformationAction Continue\\n\\nif ($topApplications.Count -gt 0) {\\n    Write-Information \\\"`nTop 5 Most Common Applications:\\\" -InformationAction Continue\\n    $topApplications | Select-Object -First 5 | ForEach-Object {\\n        Write-Information \\\"  • $($_.ApplicationName): $($_.DeviceCount) devices\\\" -InformationAction Continue\\n    }\\n}\\n\\nWrite-Information \\\"`nReports saved to:\\\" -InformationAction Continue\\nWrite-Information \\\"📄 CSV: $csvPath\\\" -InformationAction Continue\\nWrite-Information \\\"🌐 HTML: $htmlPath\\\" -InformationAction Continue\\n\\n# Disconnect from Microsoft Graph\\ntry {\\n    Disconnect-MgGraph | Out-Null\\n    Write-Information \\\"`n✓ Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Warning \\\"Could not disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n}\\n\\nWrite-Information \\\"`n🎉 Application inventory report generation completed successfully!\\\" -InformationAction Continue ",
    "logVerbose": false,
    "runbookType": "PowerShell",
    "logProgress": false
  },
  "resources": [
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]",
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "draft": {
          "inEdit": false
        },
        "logVerbose": "[variables('logVerbose')]",
        "description": "[parameters('runbookDescription')]",
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]"
      }
    },
    {
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]",
      "apiVersion": "2020-01-13-preview",
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ]
    }
  ],
  "parameters": {
    "runbookDescription": {
      "metadata": {
        "description": "Description of the runbook"
      },
      "defaultValue": "This script connects to Microsoft Graph, retrieves all managed devices and their installed applications,",
      "type": "string"
    },
    "runbookName": {
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      },
      "defaultValue": "get-application-inventory-report",
      "type": "string"
    },
    "automationAccountName": {
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      },
      "type": "string"
    }
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    }
  }
}
