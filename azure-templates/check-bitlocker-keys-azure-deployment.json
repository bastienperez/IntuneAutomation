{
  "variables": {
    "runbookType": "PowerShell",
    "logProgress": false,
    "scriptContent": "<#\\n.TITLE\\n    BitLocker Key Storage Checker\\n\\n.SYNOPSIS\\n    Monitor and verify that BitLocker recovery keys for Windows devices are properly stored in Entra ID.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph API, retrieves all Windows devices from Intune,\\n    and checks if each device has BitLocker recovery keys stored in Entra ID. The script\\n    provides detailed reporting on compliance status, identifies devices without stored keys,\\n    and exports comprehensive results to CSV format for further analysis. This helps ensure\\n    proper BitLocker key escrow for data recovery scenarios.\\n\\n.TAGS\\n    Monitoring,Security\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All,BitlockerKey.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1\\n    Generates BitLocker key storage report for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -OutputPath \\\"C:\\\\Reports\\\" -OnlyShowMissing\\n    Saves report to specified directory and shows only devices missing BitLocker keys\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -IncludeLastSync -ExportJson\\n    Includes last sync information and exports results in JSON format as well\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - BitLocker keys are automatically escrowed to Entra ID when properly configured\\n    - Devices must be Azure AD joined or Hybrid Azure AD joined for key escrow\\n    - Consider configuring BitLocker policies to enforce key escrow\\n    - Regular monitoring helps ensure compliance with data protection requirements\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show devices missing BitLocker keys\\\")]\\n    [switch]$OnlyShowMissing,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include last sync date information\\\")]\\n    [switch]$IncludeLastSync,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results in JSON format as well\\\")]\\n    [switch]$ExportJson,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress during processing\\\")]\\n    [switch]$ShowProgress\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $(<#\\n.TITLE\\n    BitLocker Key Storage Checker\\n\\n.SYNOPSIS\\n    Monitor and verify that BitLocker recovery keys for Windows devices are properly stored in Entra ID.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph API, retrieves all Windows devices from Intune,\\n    and checks if each device has BitLocker recovery keys stored in Entra ID. The script\\n    provides detailed reporting on compliance status, identifies devices without stored keys,\\n    and exports comprehensive results to CSV format for further analysis. This helps ensure\\n    proper BitLocker key escrow for data recovery scenarios.\\n\\n.TAGS\\n    Monitoring,Security\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All,BitlockerKey.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1\\n    Generates BitLocker key storage report for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -OutputPath \\\"C:\\\\Reports\\\" -OnlyShowMissing\\n    Saves report to specified directory and shows only devices missing BitLocker keys\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -IncludeLastSync -ExportJson\\n    Includes last sync information and exports results in JSON format as well\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - BitLocker keys are automatically escrowed to Entra ID when properly configured\\n    - Devices must be Azure AD joined or Hybrid Azure AD joined for key escrow\\n    - Consider configuring BitLocker policies to enforce key escrow\\n    - Regular monitoring helps ensure compliance with data protection requirements\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show devices missing BitLocker keys\\\")]\\n    [switch]$OnlyShowMissing,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include last sync date information\\\")]\\n    [switch]$IncludeLastSync,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results in JSON format as well\\\")]\\n    [switch]$ExportJson,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress during processing\\\")]\\n    [switch]$ShowProgress\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModuleList = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModuleList) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModuleList) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementManagedDevices.Read.All\\\",\\n        \\\"BitlockerKey.Read.All\\\"\\n    )\\n    Connect-MgGraph -Scopes $Scopes -NoWelcome | Out-Null\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphPaginatedData {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResult = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResult += $Response.value\\n            }\\n            else {\\n                $AllResult += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResult\\n}\\n\\n# Function to check BitLocker key availability for a device\\nfunction Test-BitLockerKeyAvailability {\\n    param (\\n        [Parameter(Mandatory = $true)]\\n        [string]$AzureADDeviceId,\\n        [Parameter(Mandatory = $false)]\\n        [string]$DeviceName = \\\"Unknown\\\"\\n    )\\n\\n    if ([string]::IsNullOrWhiteSpace($AzureADDeviceId)) {\\n        Write-Verbose \\\"Device $DeviceName has no Azure AD Device ID\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"No Azure AD Device ID\\\"\\n        }\\n    }\\n\\n    try {\\n        $keyIdUri = \\\"https://graph.microsoft.com/beta/informationProtection/bitlocker/recoveryKeys?`$filter=deviceId eq '$AzureADDeviceId'\\\"\\n        $keyIdResponse = Invoke-MgGraphRequest -Uri $keyIdUri -Method GET\\n\\n        $keyCount = $keyIdResponse.value.Count\\n        $hasKey = $keyCount -gt 0\\n\\n        return @{\\n            HasKey   = $hasKey\\n            KeyCount = $keyCount\\n            Status   = if ($hasKey) { \\\"Key Available\\\" } else { \\\"No Key Found\\\" }\\n        }\\n    }\\n    catch {\\n        Write-Warning \\\"Error checking BitLocker key for device $DeviceName : $($_.Exception.Message)\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"Error Checking\\\"\\n        }\\n    }\\n}\\n\\n# Function to format device last sync date\\nfunction Format-LastSyncDate {\\n    param([datetime]$LastSyncDateTime)\\n    \\n    if ($LastSyncDateTime -eq [datetime]::MinValue) {\\n        return \\\"Never\\\"\\n    }\\n    \\n    $daysSinceSync = (Get-Date) - $LastSyncDateTime\\n    \\n    if ($daysSinceSync.TotalDays -lt 1) {\\n        return \\\"Today\\\"\\n    }\\n    elseif ($daysSinceSync.TotalDays -lt 2) {\\n        return \\\"Yesterday\\\" \\n    }\\n    else {\\n        return \\\"$([math]::Round($daysSinceSync.TotalDays)) days ago\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key storage check...\\\" -InformationAction Continue\\n    \\n    # Validate output path\\n    if (-not (Test-Path $OutputPath)) {\\n        New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null\\n        Write-Information \\\"Created output directory: $OutputPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Get all Windows devices from Intune\\n    Write-Information \\\"Retrieving Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=operatingSystem eq 'Windows'\\\"\\n    $devices = Get-MgGraphPaginatedData -Uri $devicesUri\\n    \\n    if ($devices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune\\\"\\n        return\\n    }\\n    \\n    Write-Information \\\"Found $($devices.Count) Windows devices. Checking BitLocker key status...\\\" -InformationAction Continue\\n    \\n    $results = @()\\n    $processedCount = 0\\n    \\n    foreach ($device in $devices) {\\n        $processedCount++\\n        \\n        if ($ShowProgress) {\\n            $percentComplete = [math]::Round(($processedCount / $devices.Count) * 100, 1)\\n            Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Status \\\"Processing device: $($device.deviceName)\\\" -PercentComplete $percentComplete\\n        }\\n        \\n        # Check BitLocker key availability\\n        $bitlockerCheck = Test-BitLockerKeyAvailability -AzureADDeviceId $device.azureADDeviceId -DeviceName $device.deviceName\\n        \\n        # Prepare result object\\n        $deviceResult = [PSCustomObject]@{\\n            DeviceName                  = $device.deviceName\\n            SerialNumber                = $device.serialNumber\\n            Model                       = $device.model\\n            Manufacturer                = $device.manufacturer\\n            OSVersion                   = $device.osVersion\\n            AzureADDeviceId             = $device.azureADDeviceId\\n            \\\"BitLocker Key in Entra ID\\\" = if ($bitlockerCheck.HasKey) { \\\"Yes\\\" } else { \\\"No\\\" }\\n            \\\"Key Count\\\"                 = $bitlockerCheck.KeyCount\\n            Status                      = $bitlockerCheck.Status\\n            ComplianceState             = $device.complianceState\\n            EncryptionState             = $device.encryptionState\\n        }\\n        \\n        # Add last sync information if requested\\n        if ($IncludeLastSync) {\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Last Sync\\\" -Value $device.lastSyncDateTime.ToString(\\\"yyyy-MM-dd HH:mm\\\")\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Sync Status\\\" -Value (Format-LastSyncDate -LastSyncDateTime $device.lastSyncDateTime)\\n        }\\n        \\n        # Add to results (filter if only showing missing keys)\\n        if (-not $OnlyShowMissing -or -not $bitlockerCheck.HasKey) {\\n            $results += $deviceResult\\n        }\\n    }\\n    \\n    if ($ShowProgress) {\\n        Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"`nBitLocker Key Storage Results:\\\" -InformationAction Continue\\n    $results | Format-Table -AutoSize\\n    \\n    # Calculate and display summary statistics\\n    $totalDevices = $devices.Count\\n    $devicesWithKeys = ($devices | ForEach-Object { \\n            $check = Test-BitLockerKeyAvailability -AzureADDeviceId $_.azureADDeviceId\\n            $check.HasKey \\n        } | Where-Object { $_ -eq $true }).Count\\n    $devicesWithoutKeys = $totalDevices - $devicesWithKeys\\n    $compliancePercentage = [math]::Round(($devicesWithKeys / $totalDevices) * 100, 1)\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Storage Summary\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total Windows devices in Intune: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Devices with BitLocker keys in Entra ID: $devicesWithKeys\\\" -InformationAction Continue  \\n    Write-Information \\\"Devices without BitLocker keys: $devicesWithoutKeys\\\" -InformationAction Continue\\n    Write-Information \\\"Compliance percentage: $compliancePercentage%\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Export results to CSV\\n    $timestamp = Get-Date -Format \\\"yyyyMMdd-HHmmss\\\"\\n    $csvPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.csv\\\"\\n    $results | Export-Csv -Path $csvPath -NoTypeInformation\\n    Write-Information \\\"✓ Results exported to: $csvPath\\\" -InformationAction Continue\\n    \\n    # Export to JSON if requested\\n    if ($ExportJson) {\\n        $jsonPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.json\\\"\\n        $jsonData = @{\\n            GeneratedDate = Get-Date -Format \\\"yyyy-MM-dd HH:mm:ss\\\"\\n            Summary       = @{\\n                TotalDevices         = $totalDevices\\n                DevicesWithKeys      = $devicesWithKeys\\n                DevicesWithoutKeys   = $devicesWithoutKeys\\n                CompliancePercentage = $compliancePercentage\\n            }\\n            Devices       = $results\\n        }\\n        $jsonData | ConvertTo-Json -Depth 3 | Set-Content -Path $jsonPath\\n        Write-Information \\\"✓ Results exported to JSON: $jsonPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Show devices without keys if any exist and not in OnlyShowMissing mode\\n    if ($devicesWithoutKeys -gt 0 -and -not $OnlyShowMissing) {\\n        Write-Information \\\"`nDevices without BitLocker keys in Entra ID:\\\" -InformationAction Continue\\n        $devicesWithoutKeysList = $results | Where-Object { $_.\\\"BitLocker Key in Entra ID\\\" -eq \\\"No\\\" } | Select-Object DeviceName, SerialNumber, Status\\n        $devicesWithoutKeysList | Format-Table -AutoSize\\n    }\\n    \\n    Write-Information \\\"✓ BitLocker key storage check completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Verbose \\\"Unable to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: BitLocker Key Storage Checker\\nTotal Devices Processed: $($devices.Count)\\nDevices with Keys: $devicesWithKeys\\nCompliance Rate: $compliancePercentage%\\nReport Location: $OutputPath\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.Read.All,BitlockerKey.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $(<#\\n.TITLE\\n    BitLocker Key Storage Checker\\n\\n.SYNOPSIS\\n    Monitor and verify that BitLocker recovery keys for Windows devices are properly stored in Entra ID.\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph API, retrieves all Windows devices from Intune,\\n    and checks if each device has BitLocker recovery keys stored in Entra ID. The script\\n    provides detailed reporting on compliance status, identifies devices without stored keys,\\n    and exports comprehensive results to CSV format for further analysis. This helps ensure\\n    proper BitLocker key escrow for data recovery scenarios.\\n\\n.TAGS\\n    Monitoring,Security\\n\\n.MINROLE\\n    Intune Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All,BitlockerKey.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1\\n    Generates BitLocker key storage report for all Windows devices in Intune\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -OutputPath \\\"C:\\\\Reports\\\" -OnlyShowMissing\\n    Saves report to specified directory and shows only devices missing BitLocker keys\\n\\n.EXAMPLE\\n    .\\\\check-bitlocker-keys.ps1 -IncludeLastSync -ExportJson\\n    Includes last sync information and exports results in JSON format as well\\n\\n.NOTES\\n    - Requires Microsoft.Graph.Authentication module: Install-Module Microsoft.Graph.Authentication\\n    - BitLocker keys are automatically escrowed to Entra ID when properly configured\\n    - Devices must be Azure AD joined or Hybrid Azure AD joined for key escrow\\n    - Consider configuring BitLocker policies to enforce key escrow\\n    - Regular monitoring helps ensure compliance with data protection requirements\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Directory path to save reports\\\")]\\n    [ValidateNotNullOrEmpty()]\\n    [string]$OutputPath = \\\".\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Only show devices missing BitLocker keys\\\")]\\n    [switch]$OnlyShowMissing,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include last sync date information\\\")]\\n    [switch]$IncludeLastSync,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results in JSON format as well\\\")]\\n    [switch]$ExportJson,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress during processing\\\")]\\n    [switch]$ShowProgress\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModuleList = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModuleList) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModuleList) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementManagedDevices.Read.All\\\",\\n        \\\"BitlockerKey.Read.All\\\"\\n    )\\n    Connect-MgGraph -Scopes $Scopes -NoWelcome | Out-Null\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphPaginatedData {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResult = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResult += $Response.value\\n            }\\n            else {\\n                $AllResult += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResult\\n}\\n\\n# Function to check BitLocker key availability for a device\\nfunction Test-BitLockerKeyAvailability {\\n    param (\\n        [Parameter(Mandatory = $true)]\\n        [string]$AzureADDeviceId,\\n        [Parameter(Mandatory = $false)]\\n        [string]$DeviceName = \\\"Unknown\\\"\\n    )\\n\\n    if ([string]::IsNullOrWhiteSpace($AzureADDeviceId)) {\\n        Write-Verbose \\\"Device $DeviceName has no Azure AD Device ID\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"No Azure AD Device ID\\\"\\n        }\\n    }\\n\\n    try {\\n        $keyIdUri = \\\"https://graph.microsoft.com/beta/informationProtection/bitlocker/recoveryKeys?`$filter=deviceId eq '$AzureADDeviceId'\\\"\\n        $keyIdResponse = Invoke-MgGraphRequest -Uri $keyIdUri -Method GET\\n\\n        $keyCount = $keyIdResponse.value.Count\\n        $hasKey = $keyCount -gt 0\\n\\n        return @{\\n            HasKey   = $hasKey\\n            KeyCount = $keyCount\\n            Status   = if ($hasKey) { \\\"Key Available\\\" } else { \\\"No Key Found\\\" }\\n        }\\n    }\\n    catch {\\n        Write-Warning \\\"Error checking BitLocker key for device $DeviceName : $($_.Exception.Message)\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"Error Checking\\\"\\n        }\\n    }\\n}\\n\\n# Function to format device last sync date\\nfunction Format-LastSyncDate {\\n    param([datetime]$LastSyncDateTime)\\n    \\n    if ($LastSyncDateTime -eq [datetime]::MinValue) {\\n        return \\\"Never\\\"\\n    }\\n    \\n    $daysSinceSync = (Get-Date) - $LastSyncDateTime\\n    \\n    if ($daysSinceSync.TotalDays -lt 1) {\\n        return \\\"Today\\\"\\n    }\\n    elseif ($daysSinceSync.TotalDays -lt 2) {\\n        return \\\"Yesterday\\\" \\n    }\\n    else {\\n        return \\\"$([math]::Round($daysSinceSync.TotalDays)) days ago\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key storage check...\\\" -InformationAction Continue\\n    \\n    # Validate output path\\n    if (-not (Test-Path $OutputPath)) {\\n        New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null\\n        Write-Information \\\"Created output directory: $OutputPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Get all Windows devices from Intune\\n    Write-Information \\\"Retrieving Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=operatingSystem eq 'Windows'\\\"\\n    $devices = Get-MgGraphPaginatedData -Uri $devicesUri\\n    \\n    if ($devices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune\\\"\\n        return\\n    }\\n    \\n    Write-Information \\\"Found $($devices.Count) Windows devices. Checking BitLocker key status...\\\" -InformationAction Continue\\n    \\n    $results = @()\\n    $processedCount = 0\\n    \\n    foreach ($device in $devices) {\\n        $processedCount++\\n        \\n        if ($ShowProgress) {\\n            $percentComplete = [math]::Round(($processedCount / $devices.Count) * 100, 1)\\n            Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Status \\\"Processing device: $($device.deviceName)\\\" -PercentComplete $percentComplete\\n        }\\n        \\n        # Check BitLocker key availability\\n        $bitlockerCheck = Test-BitLockerKeyAvailability -AzureADDeviceId $device.azureADDeviceId -DeviceName $device.deviceName\\n        \\n        # Prepare result object\\n        $deviceResult = [PSCustomObject]@{\\n            DeviceName                  = $device.deviceName\\n            SerialNumber                = $device.serialNumber\\n            Model                       = $device.model\\n            Manufacturer                = $device.manufacturer\\n            OSVersion                   = $device.osVersion\\n            AzureADDeviceId             = $device.azureADDeviceId\\n            \\\"BitLocker Key in Entra ID\\\" = if ($bitlockerCheck.HasKey) { \\\"Yes\\\" } else { \\\"No\\\" }\\n            \\\"Key Count\\\"                 = $bitlockerCheck.KeyCount\\n            Status                      = $bitlockerCheck.Status\\n            ComplianceState             = $device.complianceState\\n            EncryptionState             = $device.encryptionState\\n        }\\n        \\n        # Add last sync information if requested\\n        if ($IncludeLastSync) {\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Last Sync\\\" -Value $device.lastSyncDateTime.ToString(\\\"yyyy-MM-dd HH:mm\\\")\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Sync Status\\\" -Value (Format-LastSyncDate -LastSyncDateTime $device.lastSyncDateTime)\\n        }\\n        \\n        # Add to results (filter if only showing missing keys)\\n        if (-not $OnlyShowMissing -or -not $bitlockerCheck.HasKey) {\\n            $results += $deviceResult\\n        }\\n    }\\n    \\n    if ($ShowProgress) {\\n        Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"`nBitLocker Key Storage Results:\\\" -InformationAction Continue\\n    $results | Format-Table -AutoSize\\n    \\n    # Calculate and display summary statistics\\n    $totalDevices = $devices.Count\\n    $devicesWithKeys = ($devices | ForEach-Object { \\n            $check = Test-BitLockerKeyAvailability -AzureADDeviceId $_.azureADDeviceId\\n            $check.HasKey \\n        } | Where-Object { $_ -eq $true }).Count\\n    $devicesWithoutKeys = $totalDevices - $devicesWithKeys\\n    $compliancePercentage = [math]::Round(($devicesWithKeys / $totalDevices) * 100, 1)\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Storage Summary\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total Windows devices in Intune: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Devices with BitLocker keys in Entra ID: $devicesWithKeys\\\" -InformationAction Continue  \\n    Write-Information \\\"Devices without BitLocker keys: $devicesWithoutKeys\\\" -InformationAction Continue\\n    Write-Information \\\"Compliance percentage: $compliancePercentage%\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Export results to CSV\\n    $timestamp = Get-Date -Format \\\"yyyyMMdd-HHmmss\\\"\\n    $csvPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.csv\\\"\\n    $results | Export-Csv -Path $csvPath -NoTypeInformation\\n    Write-Information \\\"✓ Results exported to: $csvPath\\\" -InformationAction Continue\\n    \\n    # Export to JSON if requested\\n    if ($ExportJson) {\\n        $jsonPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.json\\\"\\n        $jsonData = @{\\n            GeneratedDate = Get-Date -Format \\\"yyyy-MM-dd HH:mm:ss\\\"\\n            Summary       = @{\\n                TotalDevices         = $totalDevices\\n                DevicesWithKeys      = $devicesWithKeys\\n                DevicesWithoutKeys   = $devicesWithoutKeys\\n                CompliancePercentage = $compliancePercentage\\n            }\\n            Devices       = $results\\n        }\\n        $jsonData | ConvertTo-Json -Depth 3 | Set-Content -Path $jsonPath\\n        Write-Information \\\"✓ Results exported to JSON: $jsonPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Show devices without keys if any exist and not in OnlyShowMissing mode\\n    if ($devicesWithoutKeys -gt 0 -and -not $OnlyShowMissing) {\\n        Write-Information \\\"`nDevices without BitLocker keys in Entra ID:\\\" -InformationAction Continue\\n        $devicesWithoutKeysList = $results | Where-Object { $_.\\\"BitLocker Key in Entra ID\\\" -eq \\\"No\\\" } | Select-Object DeviceName, SerialNumber, Status\\n        $devicesWithoutKeysList | Format-Table -AutoSize\\n    }\\n    \\n    Write-Information \\\"✓ BitLocker key storage check completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Verbose \\\"Unable to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: BitLocker Key Storage Checker\\nTotal Devices Processed: $($devices.Count)\\nDevices with Keys: $devicesWithKeys\\nCompliance Rate: $compliancePercentage%\\nReport Location: $OutputPath\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        exit 1\\n    }\\n}# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphPaginatedData {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResult = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResult += $Response.value\\n            }\\n            else {\\n                $AllResult += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResult\\n}\\n\\n# Function to check BitLocker key availability for a device\\nfunction Test-BitLockerKeyAvailability {\\n    param (\\n        [Parameter(Mandatory = $true)]\\n        [string]$AzureADDeviceId,\\n        [Parameter(Mandatory = $false)]\\n        [string]$DeviceName = \\\"Unknown\\\"\\n    )\\n\\n    if ([string]::IsNullOrWhiteSpace($AzureADDeviceId)) {\\n        Write-Verbose \\\"Device $DeviceName has no Azure AD Device ID\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"No Azure AD Device ID\\\"\\n        }\\n    }\\n\\n    try {\\n        $keyIdUri = \\\"https://graph.microsoft.com/beta/informationProtection/bitlocker/recoveryKeys?`$filter=deviceId eq '$AzureADDeviceId'\\\"\\n        $keyIdResponse = Invoke-MgGraphRequest -Uri $keyIdUri -Method GET\\n\\n        $keyCount = $keyIdResponse.value.Count\\n        $hasKey = $keyCount -gt 0\\n\\n        return @{\\n            HasKey   = $hasKey\\n            KeyCount = $keyCount\\n            Status   = if ($hasKey) { \\\"Key Available\\\" } else { \\\"No Key Found\\\" }\\n        }\\n    }\\n    catch {\\n        Write-Warning \\\"Error checking BitLocker key for device $DeviceName : $($_.Exception.Message)\\\"\\n        return @{\\n            HasKey   = $false\\n            KeyCount = 0\\n            Status   = \\\"Error Checking\\\"\\n        }\\n    }\\n}\\n\\n# Function to format device last sync date\\nfunction Format-LastSyncDate {\\n    param([datetime]$LastSyncDateTime)\\n    \\n    if ($LastSyncDateTime -eq [datetime]::MinValue) {\\n        return \\\"Never\\\"\\n    }\\n    \\n    $daysSinceSync = (Get-Date) - $LastSyncDateTime\\n    \\n    if ($daysSinceSync.TotalDays -lt 1) {\\n        return \\\"Today\\\"\\n    }\\n    elseif ($daysSinceSync.TotalDays -lt 2) {\\n        return \\\"Yesterday\\\" \\n    }\\n    else {\\n        return \\\"$([math]::Round($daysSinceSync.TotalDays)) days ago\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting BitLocker key storage check...\\\" -InformationAction Continue\\n    \\n    # Validate output path\\n    if (-not (Test-Path $OutputPath)) {\\n        New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null\\n        Write-Information \\\"Created output directory: $OutputPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Get all Windows devices from Intune\\n    Write-Information \\\"Retrieving Windows devices from Intune...\\\" -InformationAction Continue\\n    $devicesUri = \\\"https://graph.microsoft.com/beta/deviceManagement/managedDevices?`$filter=operatingSystem eq 'Windows'\\\"\\n    $devices = Get-MgGraphPaginatedData -Uri $devicesUri\\n    \\n    if ($devices.Count -eq 0) {\\n        Write-Warning \\\"No Windows devices found in Intune\\\"\\n        return\\n    }\\n    \\n    Write-Information \\\"Found $($devices.Count) Windows devices. Checking BitLocker key status...\\\" -InformationAction Continue\\n    \\n    $results = @()\\n    $processedCount = 0\\n    \\n    foreach ($device in $devices) {\\n        $processedCount++\\n        \\n        if ($ShowProgress) {\\n            $percentComplete = [math]::Round(($processedCount / $devices.Count) * 100, 1)\\n            Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Status \\\"Processing device: $($device.deviceName)\\\" -PercentComplete $percentComplete\\n        }\\n        \\n        # Check BitLocker key availability\\n        $bitlockerCheck = Test-BitLockerKeyAvailability -AzureADDeviceId $device.azureADDeviceId -DeviceName $device.deviceName\\n        \\n        # Prepare result object\\n        $deviceResult = [PSCustomObject]@{\\n            DeviceName                  = $device.deviceName\\n            SerialNumber                = $device.serialNumber\\n            Model                       = $device.model\\n            Manufacturer                = $device.manufacturer\\n            OSVersion                   = $device.osVersion\\n            AzureADDeviceId             = $device.azureADDeviceId\\n            \\\"BitLocker Key in Entra ID\\\" = if ($bitlockerCheck.HasKey) { \\\"Yes\\\" } else { \\\"No\\\" }\\n            \\\"Key Count\\\"                 = $bitlockerCheck.KeyCount\\n            Status                      = $bitlockerCheck.Status\\n            ComplianceState             = $device.complianceState\\n            EncryptionState             = $device.encryptionState\\n        }\\n        \\n        # Add last sync information if requested\\n        if ($IncludeLastSync) {\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Last Sync\\\" -Value $device.lastSyncDateTime.ToString(\\\"yyyy-MM-dd HH:mm\\\")\\n            $deviceResult | Add-Member -MemberType NoteProperty -Name \\\"Sync Status\\\" -Value (Format-LastSyncDate -LastSyncDateTime $device.lastSyncDateTime)\\n        }\\n        \\n        # Add to results (filter if only showing missing keys)\\n        if (-not $OnlyShowMissing -or -not $bitlockerCheck.HasKey) {\\n            $results += $deviceResult\\n        }\\n    }\\n    \\n    if ($ShowProgress) {\\n        Write-Progress -Activity \\\"Checking BitLocker Keys\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"`nBitLocker Key Storage Results:\\\" -InformationAction Continue\\n    $results | Format-Table -AutoSize\\n    \\n    # Calculate and display summary statistics\\n    $totalDevices = $devices.Count\\n    $devicesWithKeys = ($devices | ForEach-Object { \\n            $check = Test-BitLockerKeyAvailability -AzureADDeviceId $_.azureADDeviceId\\n            $check.HasKey \\n        } | Where-Object { $_ -eq $true }).Count\\n    $devicesWithoutKeys = $totalDevices - $devicesWithKeys\\n    $compliancePercentage = [math]::Round(($devicesWithKeys / $totalDevices) * 100, 1)\\n    \\n    Write-Information \\\"`n========================================\\\" -InformationAction Continue\\n    Write-Information \\\"BitLocker Key Storage Summary\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total Windows devices in Intune: $totalDevices\\\" -InformationAction Continue\\n    Write-Information \\\"Devices with BitLocker keys in Entra ID: $devicesWithKeys\\\" -InformationAction Continue  \\n    Write-Information \\\"Devices without BitLocker keys: $devicesWithoutKeys\\\" -InformationAction Continue\\n    Write-Information \\\"Compliance percentage: $compliancePercentage%\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    \\n    # Export results to CSV\\n    $timestamp = Get-Date -Format \\\"yyyyMMdd-HHmmss\\\"\\n    $csvPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.csv\\\"\\n    $results | Export-Csv -Path $csvPath -NoTypeInformation\\n    Write-Information \\\"✓ Results exported to: $csvPath\\\" -InformationAction Continue\\n    \\n    # Export to JSON if requested\\n    if ($ExportJson) {\\n        $jsonPath = Join-Path $OutputPath \\\"BitLocker-Key-Storage-Report-$timestamp.json\\\"\\n        $jsonData = @{\\n            GeneratedDate = Get-Date -Format \\\"yyyy-MM-dd HH:mm:ss\\\"\\n            Summary       = @{\\n                TotalDevices         = $totalDevices\\n                DevicesWithKeys      = $devicesWithKeys\\n                DevicesWithoutKeys   = $devicesWithoutKeys\\n                CompliancePercentage = $compliancePercentage\\n            }\\n            Devices       = $results\\n        }\\n        $jsonData | ConvertTo-Json -Depth 3 | Set-Content -Path $jsonPath\\n        Write-Information \\\"✓ Results exported to JSON: $jsonPath\\\" -InformationAction Continue\\n    }\\n    \\n    # Show devices without keys if any exist and not in OnlyShowMissing mode\\n    if ($devicesWithoutKeys -gt 0 -and -not $OnlyShowMissing) {\\n        Write-Information \\\"`nDevices without BitLocker keys in Entra ID:\\\" -InformationAction Continue\\n        $devicesWithoutKeysList = $results | Where-Object { $_.\\\"BitLocker Key in Entra ID\\\" -eq \\\"No\\\" } | Select-Object DeviceName, SerialNumber, Status\\n        $devicesWithoutKeysList | Format-Table -AutoSize\\n    }\\n    \\n    Write-Information \\\"✓ BitLocker key storage check completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    try {\\n        Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n        Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Verbose \\\"Unable to disconnect from Microsoft Graph: $($_.Exception.Message)\\\"\\n    }\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: BitLocker Key Storage Checker\\nTotal Devices Processed: $($devices.Count)\\nDevices with Keys: $devicesWithKeys\\nCompliance Rate: $compliancePercentage%\\nReport Location: $OutputPath\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue ",
    "logVerbose": false
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    }
  },
  "resources": [
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]",
        "draft": {
          "inEdit": false
        },
        "description": "[parameters('runbookDescription')]",
        "logVerbose": "[variables('logVerbose')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]"
    },
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ],
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]"
    }
  ],
  "parameters": {
    "runbookDescription": {
      "defaultValue": "This script connects to Microsoft Graph API, retrieves all Windows devices from Intune,",
      "type": "string",
      "metadata": {
        "description": "Description of the runbook"
      }
    },
    "runbookName": {
      "defaultValue": "check-bitlocker-keys",
      "type": "string",
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      }
    },
    "automationAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      }
    }
  },
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
}
