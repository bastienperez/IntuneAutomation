{
  "variables": {
    "runbookType": "PowerShell",
    "logProgress": false,
    "scriptContent": "<#\\n.TITLE\\n    Get Stale Intune Devices\\n\\n.SYNOPSIS\\n    Identifies and reports on devices that haven't checked in to Intune within a specified timeframe\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves all managed devices from Intune,\\n    then identifies devices that are considered \\\"stale\\\" based on their last check-in date.\\n    The script supports all device platforms (Windows, iOS, Android, macOS) and provides\\n    comprehensive reporting with options to export results to CSV format.\\n    \\n    Stale devices may indicate hardware that is no longer in use, devices that have been\\n    reimaged without proper cleanup, or devices experiencing connectivity issues.\\n\\n.TAGS\\n    Operational,Devices\\n\\n.MINROLE\\n    Intune Service Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 30\\n    Gets all devices that haven't checked in for 30 days or more\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 60 -Platform \\\"Windows\\\" -ExportPath \\\"C:\\\\Reports\\\\stale-windows-devices.csv\\\"\\n    Gets Windows devices that haven't checked in for 60 days and exports to CSV\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 90 -IncludeNeverCheckedIn -ShowProgressBar\\n    Gets devices stale for 90+ days, includes devices that never checked in, with progress display\\n\\n.NOTES\\n    - Requires only Microsoft.Graph.Authentication module\\n    - Uses Connect-MgGraph and Invoke-MgGraphRequest for all Graph operations\\n    - Large environments may take several minutes to process\\n    - Consider running during off-hours for large tenant scans\\n    - Devices that have never checked in will show 'Never' as last check-in time\\n    - Corporate-owned devices vs personal devices are distinguished in the output\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $true, HelpMessage = \\\"Number of days since last check-in to consider a device stale\\\")]\\n    [ValidateRange(1, 1000)]\\n    [int]$DaysStale,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Filter by specific platform (Windows, iOS, Android, macOS)\\\")]\\n    [ValidateSet(\\\"Windows\\\", \\\"iOS\\\", \\\"Android\\\", \\\"macOS\\\", \\\"All\\\")]\\n    [string]$Platform = \\\"All\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include devices that have never checked in\\\")]\\n    [switch]$IncludeNeverCheckedIn,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results to CSV file path\\\")]\\n    [string]$ExportPath,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress bar during processing\\\")]\\n    [switch]$ShowProgressBar,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include additional device details in output\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# AUTHENTICATION - DUAL ENVIRONMENT SUPPORT\\n# ============================================================================\\n\\n# Detect execution environment\\nif ($PSPrivateMetadata.JobId.Guid) {\\n    Write-Output \\\"Running inside Azure Automation Runbook\\\"\\n    $IsRunbook = $true\\n} else {\\n    Write-Output \\\"Running locally in IDE or terminal\\\"\\n    $IsRunbook = $false\\n}\\n\\n# Authentication logic based on environment\\nif ($IsRunbook) {\\n    # Azure Automation Runbook - Use Managed Identity\\n    try {\\n        Write-Output \\\"Connecting to Microsoft Graph using Managed Identity...\\\"\\n        Connect-MgGraph -Identity -NoWelcome\\n        Write-Output \\\"✓ Successfully connected to Microsoft Graph using Managed Identity\\\"\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph using Managed Identity: $(<#\\n.TITLE\\n    Get Stale Intune Devices\\n\\n.SYNOPSIS\\n    Identifies and reports on devices that haven't checked in to Intune within a specified timeframe\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves all managed devices from Intune,\\n    then identifies devices that are considered \\\"stale\\\" based on their last check-in date.\\n    The script supports all device platforms (Windows, iOS, Android, macOS) and provides\\n    comprehensive reporting with options to export results to CSV format.\\n    \\n    Stale devices may indicate hardware that is no longer in use, devices that have been\\n    reimaged without proper cleanup, or devices experiencing connectivity issues.\\n\\n.TAGS\\n    Operational,Devices\\n\\n.MINROLE\\n    Intune Service Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 30\\n    Gets all devices that haven't checked in for 30 days or more\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 60 -Platform \\\"Windows\\\" -ExportPath \\\"C:\\\\Reports\\\\stale-windows-devices.csv\\\"\\n    Gets Windows devices that haven't checked in for 60 days and exports to CSV\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 90 -IncludeNeverCheckedIn -ShowProgressBar\\n    Gets devices stale for 90+ days, includes devices that never checked in, with progress display\\n\\n.NOTES\\n    - Requires only Microsoft.Graph.Authentication module\\n    - Uses Connect-MgGraph and Invoke-MgGraphRequest for all Graph operations\\n    - Large environments may take several minutes to process\\n    - Consider running during off-hours for large tenant scans\\n    - Devices that have never checked in will show 'Never' as last check-in time\\n    - Corporate-owned devices vs personal devices are distinguished in the output\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $true, HelpMessage = \\\"Number of days since last check-in to consider a device stale\\\")]\\n    [ValidateRange(1, 1000)]\\n    [int]$DaysStale,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Filter by specific platform (Windows, iOS, Android, macOS)\\\")]\\n    [ValidateSet(\\\"Windows\\\", \\\"iOS\\\", \\\"Android\\\", \\\"macOS\\\", \\\"All\\\")]\\n    [string]$Platform = \\\"All\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include devices that have never checked in\\\")]\\n    [switch]$IncludeNeverCheckedIn,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results to CSV file path\\\")]\\n    [string]$ExportPath,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress bar during processing\\\")]\\n    [switch]$ShowProgressBar,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include additional device details in output\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModules = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModules) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModules) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementManagedDevices.Read.All\\\"\\n    )\\n    Connect-MgGraph -Scopes $Scopes -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllResult {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to determine if a device is stale\\nfunction Test-DeviceStale {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $true)]\\n        [int]$DaysStale,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeNeverCheckedIn\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $IsStale = $false\\n    \\n    if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        # Device has never checked in\\n        $IsStale = $IncludeNeverCheckedIn.IsPresent\\n    }\\n    else {\\n        $LastCheckInDate = [DateTime]::Parse($LastCheckIn)\\n        $DaysSinceLastCheckIn = (Get-Date) - $LastCheckInDate\\n        $IsStale = $DaysSinceLastCheckIn.Days -ge $DaysStale\\n    }\\n    \\n    return $IsStale\\n}\\n\\n# Function to format device information\\nfunction Format-DeviceInfo {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeDetails\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $FormattedLastCheckIn = if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        \\\"Never\\\"\\n    }\\n    else {\\n        ([DateTime]::Parse($LastCheckIn)).ToString(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n    }\\n    \\n    $DaysSinceCheckIn = if ($FormattedLastCheckIn -eq \\\"Never\\\") {\\n        \\\"N/A\\\"\\n    }\\n    else {\\n        [math]::Floor(((Get-Date) - [DateTime]::Parse($LastCheckIn)).TotalDays)\\n    }\\n    \\n    $DeviceInfo = [PSCustomObject]@{\\n        DeviceName       = $Device.deviceName\\n        Platform         = $Device.operatingSystem\\n        OSVersion        = $Device.osVersion\\n        LastCheckIn      = $FormattedLastCheckIn\\n        DaysSinceCheckIn = $DaysSinceCheckIn\\n        DeviceId         = $Device.id\\n        SerialNumber     = $Device.serialNumber\\n        Model            = $Device.model\\n        Manufacturer     = $Device.manufacturer\\n        EnrollmentType   = $Device.deviceEnrollmentType\\n        Ownership        = $Device.managedDeviceOwnerType\\n        ComplianceState  = $Device.complianceState\\n        ManagementState  = $Device.managementState\\n    }\\n    \\n    if (-not $IncludeDetails) {\\n        $DeviceInfo = $DeviceInfo | Select-Object DeviceName, Platform, OSVersion, LastCheckIn, DaysSinceCheckIn, Ownership, ComplianceState\\n    }\\n    \\n    return $DeviceInfo\\n}\\n\\n# Function to get platform-specific OData filter\\nfunction Get-PlatformFilter {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Platform\\n    )\\n    \\n    switch ($Platform) {\\n        \\\"Windows\\\" { return \\\"operatingSystem eq 'Windows'\\\" }\\n        \\\"iOS\\\" { return \\\"operatingSystem eq 'iOS'\\\" }\\n        \\\"Android\\\" { return \\\"operatingSystem eq 'Android'\\\" }\\n        \\\"macOS\\\" { return \\\"operatingSystem eq 'macOS'\\\" }\\n        \\\"All\\\" { return $null }\\n        default { return $null }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting stale device detection...\\\" -InformationAction Continue\\n    Write-Information \\\"Configuration:\\\" -InformationAction Continue\\n    Write-Information \\\"  - Days considered stale: $DaysStale\\\" -InformationAction Continue\\n    Write-Information \\\"  - Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"  - Include never checked in: $($IncludeNeverCheckedIn.IsPresent)\\\" -InformationAction Continue\\n    \\n    # Build the API URI with optional platform filter\\n    $BaseUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n    $PlatformFilter = Get-PlatformFilter -Platform $Platform\\n    \\n    if ($PlatformFilter) {\\n        $Uri = \\\"$BaseUri?`$filter=$PlatformFilter\\\"\\n        Write-Information \\\"  - Applying platform filter: $PlatformFilter\\\" -InformationAction Continue\\n    }\\n    else {\\n        $Uri = $BaseUri\\n    }\\n    \\n    # Retrieve all managed devices\\n    Write-Information \\\"Retrieving managed devices from Intune...\\\" -InformationAction Continue\\n    $AllDevices = Get-MgGraphAllResult -Uri $Uri\\n    Write-Information \\\"✓ Retrieved $($AllDevices.Count) devices\\\" -InformationAction Continue\\n    \\n    # Process devices to find stale ones\\n    Write-Information \\\"Analyzing devices for staleness...\\\" -InformationAction Continue\\n    $StaleDevices = @()\\n    $ProcessedCount = 0\\n    \\n    foreach ($Device in $AllDevices) {\\n        $ProcessedCount++\\n        \\n        if ($ShowProgressBar) {\\n            $PercentComplete = [math]::Round(($ProcessedCount / $AllDevices.Count) * 100)\\n            Write-Progress -Activity \\\"Analyzing devices\\\" -Status \\\"Processing device $ProcessedCount of $($AllDevices.Count)\\\" -PercentComplete $PercentComplete\\n        }\\n        \\n        if (Test-DeviceStale -Device $Device -DaysStale $DaysStale -IncludeNeverCheckedIn:$IncludeNeverCheckedIn) {\\n            $FormattedDevice = Format-DeviceInfo -Device $Device -IncludeDetails:$IncludeDetails\\n            $StaleDevices += $FormattedDevice\\n        }\\n    }\\n    \\n    if ($ShowProgressBar) {\\n        Write-Progress -Activity \\\"Analyzing devices\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"✓ Analysis completed\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"STALE DEVICE REPORT\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices analyzed: $($AllDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Stale devices found: $($StaleDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Staleness threshold: $DaysStale days\\\" -InformationAction Continue\\n    Write-Information \\\"Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    \\n    if ($StaleDevices.Count -gt 0) {\\n        # Group by platform for summary\\n        $PlatformSummary = $StaleDevices | Group-Object Platform | Sort-Object Name\\n        Write-Information \\\"Stale devices by platform:\\\" -InformationAction Continue\\n        foreach ($Group in $PlatformSummary) {\\n            Write-Information \\\"  - $($Group.Name): $($Group.Count) devices\\\" -InformationAction Continue\\n        }\\n        Write-Information \\\"\\\" -InformationAction Continue\\n        \\n        # Display the stale devices\\n        $StaleDevices | Sort-Object Platform, DeviceName | Format-Table -AutoSize\\n        \\n        # Export to CSV if path specified\\n        if ($ExportPath) {\\n            try {\\n                $StaleDevices | Export-Csv -Path $ExportPath -NoTypeInformation\\n                Write-Information \\\"✓ Results exported to: $ExportPath\\\" -InformationAction Continue\\n            }\\n            catch {\\n                Write-Warning \\\"Failed to export to CSV: $($_.Exception.Message)\\\"\\n            }\\n        }\\n    }\\n    else {\\n        Write-Information \\\"No stale devices found matching the specified criteria.\\\" -InformationAction Continue\\n    }\\n    \\n    Write-Information \\\"✓ Script completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n    Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Get Stale Intune Devices\\nParameters: DaysStale=$DaysStale, Platform=$Platform\\nDevices Analyzed: $($AllDevices.Count)\\nStale Devices Found: $($StaleDevices.Count)\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        throw\\n    }\\n} else {\\n    # Local execution - Use interactive authentication\\n    # Check if required modules are installed\\n    $RequiredModules = @(\\n        \\\"Microsoft.Graph.Authentication\\\"\\n    )\\n\\n    foreach ($Module in $RequiredModules) {\\n        if (-not (Get-Module -ListAvailable -Name $Module)) {\\n            Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n            exit 1\\n        }\\n    }\\n\\n    # Import required modules\\n    foreach ($Module in $RequiredModules) {\\n        Import-Module $Module\\n    }\\n\\n    # Connect to Microsoft Graph with required scopes\\n    try {\\n        Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n        $Scopes = @(\\n            \\\"DeviceManagementManagedDevices.Read.All\\\"\\n        )\\n        Connect-MgGraph -Scopes $Scopes -NoWelcome\\n        Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n    }\\n    catch {\\n        Write-Error \\\"Failed to connect to Microsoft Graph: $(<#\\n.TITLE\\n    Get Stale Intune Devices\\n\\n.SYNOPSIS\\n    Identifies and reports on devices that haven't checked in to Intune within a specified timeframe\\n\\n.DESCRIPTION\\n    This script connects to Microsoft Graph and retrieves all managed devices from Intune,\\n    then identifies devices that are considered \\\"stale\\\" based on their last check-in date.\\n    The script supports all device platforms (Windows, iOS, Android, macOS) and provides\\n    comprehensive reporting with options to export results to CSV format.\\n    \\n    Stale devices may indicate hardware that is no longer in use, devices that have been\\n    reimaged without proper cleanup, or devices experiencing connectivity issues.\\n\\n.TAGS\\n    Operational,Devices\\n\\n.MINROLE\\n    Intune Service Administrator\\n\\n.PERMISSIONS\\n    DeviceManagementManagedDevices.Read.All\\n\\n.AUTHOR\\n    Ugur Koc\\n\\n.VERSION\\n    1.0\\n\\n.CHANGELOG\\n    1.0 - Initial release\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 30\\n    Gets all devices that haven't checked in for 30 days or more\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 60 -Platform \\\"Windows\\\" -ExportPath \\\"C:\\\\Reports\\\\stale-windows-devices.csv\\\"\\n    Gets Windows devices that haven't checked in for 60 days and exports to CSV\\n\\n.EXAMPLE\\n    .\\\\get-stale-devices.ps1 -DaysStale 90 -IncludeNeverCheckedIn -ShowProgressBar\\n    Gets devices stale for 90+ days, includes devices that never checked in, with progress display\\n\\n.NOTES\\n    - Requires only Microsoft.Graph.Authentication module\\n    - Uses Connect-MgGraph and Invoke-MgGraphRequest for all Graph operations\\n    - Large environments may take several minutes to process\\n    - Consider running during off-hours for large tenant scans\\n    - Devices that have never checked in will show 'Never' as last check-in time\\n    - Corporate-owned devices vs personal devices are distinguished in the output\\n#>\\n\\n[CmdletBinding()]\\nparam(\\n    [Parameter(Mandatory = $true, HelpMessage = \\\"Number of days since last check-in to consider a device stale\\\")]\\n    [ValidateRange(1, 1000)]\\n    [int]$DaysStale,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Filter by specific platform (Windows, iOS, Android, macOS)\\\")]\\n    [ValidateSet(\\\"Windows\\\", \\\"iOS\\\", \\\"Android\\\", \\\"macOS\\\", \\\"All\\\")]\\n    [string]$Platform = \\\"All\\\",\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include devices that have never checked in\\\")]\\n    [switch]$IncludeNeverCheckedIn,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Export results to CSV file path\\\")]\\n    [string]$ExportPath,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Show progress bar during processing\\\")]\\n    [switch]$ShowProgressBar,\\n    \\n    [Parameter(Mandatory = $false, HelpMessage = \\\"Include additional device details in output\\\")]\\n    [switch]$IncludeDetails\\n)\\n\\n# ============================================================================\\n# MODULES AND AUTHENTICATION\\n# ============================================================================\\n\\n# Check if required modules are installed\\n$RequiredModules = @(\\n    \\\"Microsoft.Graph.Authentication\\\"\\n)\\n\\nforeach ($Module in $RequiredModules) {\\n    if (-not (Get-Module -ListAvailable -Name $Module)) {\\n        Write-Error \\\"$Module module is required. Install it using: Install-Module $Module -Scope CurrentUser\\\"\\n        exit 1\\n    }\\n}\\n\\n# Import required modules\\nforeach ($Module in $RequiredModules) {\\n    Import-Module $Module\\n}\\n\\n# Connect to Microsoft Graph\\ntry {\\n    Write-Information \\\"Connecting to Microsoft Graph...\\\" -InformationAction Continue\\n    $Scopes = @(\\n        \\\"DeviceManagementManagedDevices.Read.All\\\"\\n    )\\n    Connect-MgGraph -Scopes $Scopes -NoWelcome\\n    Write-Information \\\"✓ Successfully connected to Microsoft Graph\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Failed to connect to Microsoft Graph: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\n\\n# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllResult {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to determine if a device is stale\\nfunction Test-DeviceStale {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $true)]\\n        [int]$DaysStale,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeNeverCheckedIn\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $IsStale = $false\\n    \\n    if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        # Device has never checked in\\n        $IsStale = $IncludeNeverCheckedIn.IsPresent\\n    }\\n    else {\\n        $LastCheckInDate = [DateTime]::Parse($LastCheckIn)\\n        $DaysSinceLastCheckIn = (Get-Date) - $LastCheckInDate\\n        $IsStale = $DaysSinceLastCheckIn.Days -ge $DaysStale\\n    }\\n    \\n    return $IsStale\\n}\\n\\n# Function to format device information\\nfunction Format-DeviceInfo {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeDetails\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $FormattedLastCheckIn = if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        \\\"Never\\\"\\n    }\\n    else {\\n        ([DateTime]::Parse($LastCheckIn)).ToString(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n    }\\n    \\n    $DaysSinceCheckIn = if ($FormattedLastCheckIn -eq \\\"Never\\\") {\\n        \\\"N/A\\\"\\n    }\\n    else {\\n        [math]::Floor(((Get-Date) - [DateTime]::Parse($LastCheckIn)).TotalDays)\\n    }\\n    \\n    $DeviceInfo = [PSCustomObject]@{\\n        DeviceName       = $Device.deviceName\\n        Platform         = $Device.operatingSystem\\n        OSVersion        = $Device.osVersion\\n        LastCheckIn      = $FormattedLastCheckIn\\n        DaysSinceCheckIn = $DaysSinceCheckIn\\n        DeviceId         = $Device.id\\n        SerialNumber     = $Device.serialNumber\\n        Model            = $Device.model\\n        Manufacturer     = $Device.manufacturer\\n        EnrollmentType   = $Device.deviceEnrollmentType\\n        Ownership        = $Device.managedDeviceOwnerType\\n        ComplianceState  = $Device.complianceState\\n        ManagementState  = $Device.managementState\\n    }\\n    \\n    if (-not $IncludeDetails) {\\n        $DeviceInfo = $DeviceInfo | Select-Object DeviceName, Platform, OSVersion, LastCheckIn, DaysSinceCheckIn, Ownership, ComplianceState\\n    }\\n    \\n    return $DeviceInfo\\n}\\n\\n# Function to get platform-specific OData filter\\nfunction Get-PlatformFilter {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Platform\\n    )\\n    \\n    switch ($Platform) {\\n        \\\"Windows\\\" { return \\\"operatingSystem eq 'Windows'\\\" }\\n        \\\"iOS\\\" { return \\\"operatingSystem eq 'iOS'\\\" }\\n        \\\"Android\\\" { return \\\"operatingSystem eq 'Android'\\\" }\\n        \\\"macOS\\\" { return \\\"operatingSystem eq 'macOS'\\\" }\\n        \\\"All\\\" { return $null }\\n        default { return $null }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting stale device detection...\\\" -InformationAction Continue\\n    Write-Information \\\"Configuration:\\\" -InformationAction Continue\\n    Write-Information \\\"  - Days considered stale: $DaysStale\\\" -InformationAction Continue\\n    Write-Information \\\"  - Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"  - Include never checked in: $($IncludeNeverCheckedIn.IsPresent)\\\" -InformationAction Continue\\n    \\n    # Build the API URI with optional platform filter\\n    $BaseUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n    $PlatformFilter = Get-PlatformFilter -Platform $Platform\\n    \\n    if ($PlatformFilter) {\\n        $Uri = \\\"$BaseUri?`$filter=$PlatformFilter\\\"\\n        Write-Information \\\"  - Applying platform filter: $PlatformFilter\\\" -InformationAction Continue\\n    }\\n    else {\\n        $Uri = $BaseUri\\n    }\\n    \\n    # Retrieve all managed devices\\n    Write-Information \\\"Retrieving managed devices from Intune...\\\" -InformationAction Continue\\n    $AllDevices = Get-MgGraphAllResult -Uri $Uri\\n    Write-Information \\\"✓ Retrieved $($AllDevices.Count) devices\\\" -InformationAction Continue\\n    \\n    # Process devices to find stale ones\\n    Write-Information \\\"Analyzing devices for staleness...\\\" -InformationAction Continue\\n    $StaleDevices = @()\\n    $ProcessedCount = 0\\n    \\n    foreach ($Device in $AllDevices) {\\n        $ProcessedCount++\\n        \\n        if ($ShowProgressBar) {\\n            $PercentComplete = [math]::Round(($ProcessedCount / $AllDevices.Count) * 100)\\n            Write-Progress -Activity \\\"Analyzing devices\\\" -Status \\\"Processing device $ProcessedCount of $($AllDevices.Count)\\\" -PercentComplete $PercentComplete\\n        }\\n        \\n        if (Test-DeviceStale -Device $Device -DaysStale $DaysStale -IncludeNeverCheckedIn:$IncludeNeverCheckedIn) {\\n            $FormattedDevice = Format-DeviceInfo -Device $Device -IncludeDetails:$IncludeDetails\\n            $StaleDevices += $FormattedDevice\\n        }\\n    }\\n    \\n    if ($ShowProgressBar) {\\n        Write-Progress -Activity \\\"Analyzing devices\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"✓ Analysis completed\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"STALE DEVICE REPORT\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices analyzed: $($AllDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Stale devices found: $($StaleDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Staleness threshold: $DaysStale days\\\" -InformationAction Continue\\n    Write-Information \\\"Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    \\n    if ($StaleDevices.Count -gt 0) {\\n        # Group by platform for summary\\n        $PlatformSummary = $StaleDevices | Group-Object Platform | Sort-Object Name\\n        Write-Information \\\"Stale devices by platform:\\\" -InformationAction Continue\\n        foreach ($Group in $PlatformSummary) {\\n            Write-Information \\\"  - $($Group.Name): $($Group.Count) devices\\\" -InformationAction Continue\\n        }\\n        Write-Information \\\"\\\" -InformationAction Continue\\n        \\n        # Display the stale devices\\n        $StaleDevices | Sort-Object Platform, DeviceName | Format-Table -AutoSize\\n        \\n        # Export to CSV if path specified\\n        if ($ExportPath) {\\n            try {\\n                $StaleDevices | Export-Csv -Path $ExportPath -NoTypeInformation\\n                Write-Information \\\"✓ Results exported to: $ExportPath\\\" -InformationAction Continue\\n            }\\n            catch {\\n                Write-Warning \\\"Failed to export to CSV: $($_.Exception.Message)\\\"\\n            }\\n        }\\n    }\\n    else {\\n        Write-Information \\\"No stale devices found matching the specified criteria.\\\" -InformationAction Continue\\n    }\\n    \\n    Write-Information \\\"✓ Script completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n    Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Get Stale Intune Devices\\nParameters: DaysStale=$DaysStale, Platform=$Platform\\nDevices Analyzed: $($AllDevices.Count)\\nStale Devices Found: $($StaleDevices.Count)\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue .Exception.Message)\\\"\\n        exit 1\\n    }\\n}# ============================================================================\\n# HELPER FUNCTIONS\\n# ============================================================================\\n\\n# Function to get all pages of results from Graph API\\nfunction Get-MgGraphAllResult {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Uri,\\n        [int]$DelayMs = 100\\n    )\\n    \\n    $AllResults = @()\\n    $NextLink = $Uri\\n    $RequestCount = 0\\n    \\n    do {\\n        try {\\n            # Add delay to respect rate limits\\n            if ($RequestCount -gt 0) {\\n                Start-Sleep -Milliseconds $DelayMs\\n            }\\n            \\n            $Response = Invoke-MgGraphRequest -Uri $NextLink -Method GET\\n            $RequestCount++\\n            \\n            if ($Response.value) {\\n                $AllResults += $Response.value\\n            }\\n            else {\\n                $AllResults += $Response\\n            }\\n            \\n            $NextLink = $Response.'@odata.nextLink'\\n        }\\n        catch {\\n            if ($_.Exception.Message -like \\\"*429*\\\" -or $_.Exception.Message -like \\\"*throttled*\\\") {\\n                Write-Information \\\"`nRate limit hit, waiting 60 seconds...\\\" -InformationAction Continue\\n                Start-Sleep -Seconds 60\\n                continue\\n            }\\n            Write-Warning \\\"Error fetching data from $NextLink : $($_.Exception.Message)\\\"\\n            break\\n        }\\n    } while ($NextLink)\\n    \\n    return $AllResults\\n}\\n\\n# Function to determine if a device is stale\\nfunction Test-DeviceStale {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $true)]\\n        [int]$DaysStale,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeNeverCheckedIn\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $IsStale = $false\\n    \\n    if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        # Device has never checked in\\n        $IsStale = $IncludeNeverCheckedIn.IsPresent\\n    }\\n    else {\\n        $LastCheckInDate = [DateTime]::Parse($LastCheckIn)\\n        $DaysSinceLastCheckIn = (Get-Date) - $LastCheckInDate\\n        $IsStale = $DaysSinceLastCheckIn.Days -ge $DaysStale\\n    }\\n    \\n    return $IsStale\\n}\\n\\n# Function to format device information\\nfunction Format-DeviceInfo {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [object]$Device,\\n        [Parameter(Mandatory = $false)]\\n        [switch]$IncludeDetails\\n    )\\n    \\n    $LastCheckIn = $Device.lastSyncDateTime\\n    $FormattedLastCheckIn = if ([string]::IsNullOrEmpty($LastCheckIn) -or $LastCheckIn -eq \\\"0001-01-01T00:00:00Z\\\") {\\n        \\\"Never\\\"\\n    }\\n    else {\\n        ([DateTime]::Parse($LastCheckIn)).ToString(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n    }\\n    \\n    $DaysSinceCheckIn = if ($FormattedLastCheckIn -eq \\\"Never\\\") {\\n        \\\"N/A\\\"\\n    }\\n    else {\\n        [math]::Floor(((Get-Date) - [DateTime]::Parse($LastCheckIn)).TotalDays)\\n    }\\n    \\n    $DeviceInfo = [PSCustomObject]@{\\n        DeviceName       = $Device.deviceName\\n        Platform         = $Device.operatingSystem\\n        OSVersion        = $Device.osVersion\\n        LastCheckIn      = $FormattedLastCheckIn\\n        DaysSinceCheckIn = $DaysSinceCheckIn\\n        DeviceId         = $Device.id\\n        SerialNumber     = $Device.serialNumber\\n        Model            = $Device.model\\n        Manufacturer     = $Device.manufacturer\\n        EnrollmentType   = $Device.deviceEnrollmentType\\n        Ownership        = $Device.managedDeviceOwnerType\\n        ComplianceState  = $Device.complianceState\\n        ManagementState  = $Device.managementState\\n    }\\n    \\n    if (-not $IncludeDetails) {\\n        $DeviceInfo = $DeviceInfo | Select-Object DeviceName, Platform, OSVersion, LastCheckIn, DaysSinceCheckIn, Ownership, ComplianceState\\n    }\\n    \\n    return $DeviceInfo\\n}\\n\\n# Function to get platform-specific OData filter\\nfunction Get-PlatformFilter {\\n    param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$Platform\\n    )\\n    \\n    switch ($Platform) {\\n        \\\"Windows\\\" { return \\\"operatingSystem eq 'Windows'\\\" }\\n        \\\"iOS\\\" { return \\\"operatingSystem eq 'iOS'\\\" }\\n        \\\"Android\\\" { return \\\"operatingSystem eq 'Android'\\\" }\\n        \\\"macOS\\\" { return \\\"operatingSystem eq 'macOS'\\\" }\\n        \\\"All\\\" { return $null }\\n        default { return $null }\\n    }\\n}\\n\\n# ============================================================================\\n# MAIN SCRIPT LOGIC\\n# ============================================================================\\n\\ntry {\\n    Write-Information \\\"Starting stale device detection...\\\" -InformationAction Continue\\n    Write-Information \\\"Configuration:\\\" -InformationAction Continue\\n    Write-Information \\\"  - Days considered stale: $DaysStale\\\" -InformationAction Continue\\n    Write-Information \\\"  - Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"  - Include never checked in: $($IncludeNeverCheckedIn.IsPresent)\\\" -InformationAction Continue\\n    \\n    # Build the API URI with optional platform filter\\n    $BaseUri = \\\"https://graph.microsoft.com/v1.0/deviceManagement/managedDevices\\\"\\n    $PlatformFilter = Get-PlatformFilter -Platform $Platform\\n    \\n    if ($PlatformFilter) {\\n        $Uri = \\\"$BaseUri?`$filter=$PlatformFilter\\\"\\n        Write-Information \\\"  - Applying platform filter: $PlatformFilter\\\" -InformationAction Continue\\n    }\\n    else {\\n        $Uri = $BaseUri\\n    }\\n    \\n    # Retrieve all managed devices\\n    Write-Information \\\"Retrieving managed devices from Intune...\\\" -InformationAction Continue\\n    $AllDevices = Get-MgGraphAllResult -Uri $Uri\\n    Write-Information \\\"✓ Retrieved $($AllDevices.Count) devices\\\" -InformationAction Continue\\n    \\n    # Process devices to find stale ones\\n    Write-Information \\\"Analyzing devices for staleness...\\\" -InformationAction Continue\\n    $StaleDevices = @()\\n    $ProcessedCount = 0\\n    \\n    foreach ($Device in $AllDevices) {\\n        $ProcessedCount++\\n        \\n        if ($ShowProgressBar) {\\n            $PercentComplete = [math]::Round(($ProcessedCount / $AllDevices.Count) * 100)\\n            Write-Progress -Activity \\\"Analyzing devices\\\" -Status \\\"Processing device $ProcessedCount of $($AllDevices.Count)\\\" -PercentComplete $PercentComplete\\n        }\\n        \\n        if (Test-DeviceStale -Device $Device -DaysStale $DaysStale -IncludeNeverCheckedIn:$IncludeNeverCheckedIn) {\\n            $FormattedDevice = Format-DeviceInfo -Device $Device -IncludeDetails:$IncludeDetails\\n            $StaleDevices += $FormattedDevice\\n        }\\n    }\\n    \\n    if ($ShowProgressBar) {\\n        Write-Progress -Activity \\\"Analyzing devices\\\" -Completed\\n    }\\n    \\n    # Display results\\n    Write-Information \\\"✓ Analysis completed\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"STALE DEVICE REPORT\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"Total devices analyzed: $($AllDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Stale devices found: $($StaleDevices.Count)\\\" -InformationAction Continue\\n    Write-Information \\\"Staleness threshold: $DaysStale days\\\" -InformationAction Continue\\n    Write-Information \\\"Platform filter: $Platform\\\" -InformationAction Continue\\n    Write-Information \\\"========================================\\\" -InformationAction Continue\\n    Write-Information \\\"\\\" -InformationAction Continue\\n    \\n    if ($StaleDevices.Count -gt 0) {\\n        # Group by platform for summary\\n        $PlatformSummary = $StaleDevices | Group-Object Platform | Sort-Object Name\\n        Write-Information \\\"Stale devices by platform:\\\" -InformationAction Continue\\n        foreach ($Group in $PlatformSummary) {\\n            Write-Information \\\"  - $($Group.Name): $($Group.Count) devices\\\" -InformationAction Continue\\n        }\\n        Write-Information \\\"\\\" -InformationAction Continue\\n        \\n        # Display the stale devices\\n        $StaleDevices | Sort-Object Platform, DeviceName | Format-Table -AutoSize\\n        \\n        # Export to CSV if path specified\\n        if ($ExportPath) {\\n            try {\\n                $StaleDevices | Export-Csv -Path $ExportPath -NoTypeInformation\\n                Write-Information \\\"✓ Results exported to: $ExportPath\\\" -InformationAction Continue\\n            }\\n            catch {\\n                Write-Warning \\\"Failed to export to CSV: $($_.Exception.Message)\\\"\\n            }\\n        }\\n    }\\n    else {\\n        Write-Information \\\"No stale devices found matching the specified criteria.\\\" -InformationAction Continue\\n    }\\n    \\n    Write-Information \\\"✓ Script completed successfully\\\" -InformationAction Continue\\n}\\ncatch {\\n    Write-Error \\\"Script failed: $($_.Exception.Message)\\\"\\n    exit 1\\n}\\nfinally {\\n    # Cleanup operations\\n    Disconnect-MgGraph -ErrorAction SilentlyContinue | Out-Null\\n    Write-Information \\\"Disconnected from Microsoft Graph\\\" -InformationAction Continue\\n}\\n\\n# ============================================================================\\n# SCRIPT SUMMARY\\n# ============================================================================\\n\\nWrite-Information \\\"\\n========================================\\nScript Execution Summary\\n========================================\\nScript: Get Stale Intune Devices\\nParameters: DaysStale=$DaysStale, Platform=$Platform\\nDevices Analyzed: $($AllDevices.Count)\\nStale Devices Found: $($StaleDevices.Count)\\nStatus: Completed\\n========================================\\n\\\" -InformationAction Continue ",
    "logVerbose": false
  },
  "outputs": {
    "deploymentInstructions": {
      "type": "string",
      "value": "Runbook created successfully! Next steps: 1) Publish the runbook draft, 2) Ensure your Automation Account has Managed Identity enabled, 3) Assign required Microsoft Graph permissions to the Managed Identity."
    },
    "runbookName": {
      "type": "string",
      "value": "[parameters('runbookName')]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[parameters('automationAccountName')]"
    },
    "runbookUrl": {
      "type": "string",
      "value": "[concat('https://portal.azure.com/#@', subscription().tenantId, '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', parameters('runbookName'))]"
    }
  },
  "resources": [
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "properties": {
        "runbookType": "[variables('runbookType')]",
        "logProgress": "[variables('logProgress')]",
        "draft": {
          "inEdit": false
        },
        "description": "[parameters('runbookDescription')]",
        "logVerbose": "[variables('logVerbose')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'))]"
    },
    {
      "apiVersion": "2020-01-13-preview",
      "type": "Microsoft.Automation/automationAccounts/runbooks/draft",
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('runbookName'))]"
      ],
      "properties": {
        "description": "[parameters('runbookDescription')]",
        "content": "[variables('scriptContent')]"
      },
      "name": "[concat(parameters('automationAccountName'), '/', parameters('runbookName'), '/draft')]"
    }
  ],
  "parameters": {
    "runbookDescription": {
      "defaultValue": "This script connects to Microsoft Graph and retrieves all managed devices from Intune,",
      "type": "string",
      "metadata": {
        "description": "Description of the runbook"
      }
    },
    "runbookName": {
      "defaultValue": "get-stale-devices",
      "type": "string",
      "metadata": {
        "description": "Name for the new runbook (will be created in the Automation Account)"
      }
    },
    "automationAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of your existing Azure Automation Account (must exist in the selected resource group)"
      }
    }
  },
  "contentVersion": "1.0.0.0",
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
}
